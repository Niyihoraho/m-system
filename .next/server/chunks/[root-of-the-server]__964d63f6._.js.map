{"version":3,"sources":["turbopack:///[project]/lib/rls.ts","turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js","turbopack:///[project]/app/api/attendance/route.ts"],"sourcesContent":["import { auth } from \"@/lib/auth\";\r\n\r\n// User scope interface\r\nexport interface UserScope {\r\n  scope: 'superadmin' | 'national' | 'region' | 'university' | 'smallgroup' | 'alumnismallgroup';\r\n  regionId?: number | null;\r\n  universityId?: number | null;\r\n  smallGroupId?: number | null;\r\n  alumniGroupId?: number | null;\r\n}\r\n\r\n// RLS conditions interface\r\nexport interface RLSConditions {\r\n  regionId?: number;\r\n  universityId?: number;\r\n  smallGroupId?: number;\r\n  alumniGroupId?: number;\r\n}\r\n\r\n/**\r\n * Get the current user's scope from the session\r\n * Returns the most restrictive scope if user has multiple roles\r\n */\r\nexport async function getUserScope(): Promise<UserScope | null> {\r\n  try {\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.roles || session.user.roles.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Get the most restrictive scope (highest priority)\r\n    const roles = session.user.roles;\r\n    \r\n    // Priority order: superadmin > national > region > university > smallgroup > alumnismallgroup\r\n    const scopePriority = {\r\n      'superadmin': 1,\r\n      'national': 2,\r\n      'region': 3,\r\n      'university': 4,\r\n      'smallgroup': 5,\r\n      'alumnismallgroup': 6\r\n    };\r\n\r\n    // Find the role with the highest priority (most restrictive)\r\n    const primaryRole = roles.reduce((prev, current) => {\r\n      const prevPriority = scopePriority[prev.scope as keyof typeof scopePriority] || 999;\r\n      const currentPriority = scopePriority[current.scope as keyof typeof scopePriority] || 999;\r\n      return currentPriority < prevPriority ? current : prev;\r\n    });\r\n\r\n    return {\r\n      scope: primaryRole.scope as UserScope['scope'],\r\n      regionId: primaryRole.regionId,\r\n      universityId: primaryRole.universityId,\r\n      smallGroupId: primaryRole.smallGroupId,\r\n      alumniGroupId: primaryRole.alumniGroupId\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting user scope:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Generate RLS conditions based on user scope\r\n * Returns an object with the appropriate WHERE conditions for database queries\r\n */\r\nexport function generateRLSConditions(userScope: UserScope): RLSConditions {\r\n  const conditions: RLSConditions = {};\r\n\r\n  // Superadmin has access to everything - no conditions needed\r\n  if (userScope.scope === 'superadmin') {\r\n    return conditions;\r\n  }\r\n\r\n  // National scope - access to all regions (no filtering needed for now)\r\n  if (userScope.scope === 'national') {\r\n    return conditions;\r\n  }\r\n\r\n  // Region scope - access to specific region and all its children\r\n  if (userScope.scope === 'region' && userScope.regionId) {\r\n    conditions.regionId = userScope.regionId;\r\n    return conditions;\r\n  }\r\n\r\n  // University scope - access to specific university and its small groups\r\n  if (userScope.scope === 'university' && userScope.universityId) {\r\n    conditions.universityId = userScope.universityId;\r\n    // Also include regionId for consistency\r\n    if (userScope.regionId) {\r\n      conditions.regionId = userScope.regionId;\r\n    }\r\n    return conditions;\r\n  }\r\n\r\n  // Small group scope - access to specific small group only\r\n  if (userScope.scope === 'smallgroup' && userScope.smallGroupId) {\r\n    conditions.smallGroupId = userScope.smallGroupId;\r\n    // Include parent IDs for consistency\r\n    if (userScope.universityId) {\r\n      conditions.universityId = userScope.universityId;\r\n    }\r\n    if (userScope.regionId) {\r\n      conditions.regionId = userScope.regionId;\r\n    }\r\n    return conditions;\r\n  }\r\n\r\n  // Alumni small group scope - access to specific alumni group only\r\n  if (userScope.scope === 'alumnismallgroup' && userScope.alumniGroupId) {\r\n    conditions.alumniGroupId = userScope.alumniGroupId;\r\n    // Include regionId for consistency\r\n    if (userScope.regionId) {\r\n      conditions.regionId = userScope.regionId;\r\n    }\r\n    return conditions;\r\n  }\r\n\r\n  // If no valid scope found, return empty conditions (no access)\r\n  return conditions;\r\n}\r\n\r\n/**\r\n * Check if user has permission to access a specific resource\r\n */\r\nexport function hasPermission(\r\n  userScope: UserScope,\r\n  resourceType: 'region' | 'university' | 'smallgroup' | 'alumnismallgroup',\r\n  resourceId: number\r\n): boolean {\r\n  // Superadmin has access to everything\r\n  if (userScope.scope === 'superadmin') {\r\n    return true;\r\n  }\r\n\r\n  // National scope has access to everything\r\n  if (userScope.scope === 'national') {\r\n    return true;\r\n  }\r\n\r\n  switch (resourceType) {\r\n    case 'region':\r\n      return userScope.scope === 'region' && userScope.regionId === resourceId;\r\n    \r\n    case 'university':\r\n      return (userScope.scope === 'university' && userScope.universityId === resourceId) ||\r\n             (userScope.scope === 'region' && userScope.regionId !== null);\r\n    \r\n    case 'smallgroup':\r\n      return (userScope.scope === 'smallgroup' && userScope.smallGroupId === resourceId) ||\r\n             (userScope.scope === 'university' && userScope.universityId !== null) ||\r\n             (userScope.scope === 'region' && userScope.regionId !== null);\r\n    \r\n    case 'alumnismallgroup':\r\n      return (userScope.scope === 'alumnismallgroup' && userScope.alumniGroupId === resourceId) ||\r\n             (userScope.scope === 'region' && userScope.regionId !== null);\r\n    \r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Get RLS conditions for specific tables\r\n * Some tables don't have all the foreign key columns, so we need to map appropriately\r\n */\r\nexport function getTableRLSConditions(userScope: UserScope, tableName: string): any {\r\n  const rlsConditions = generateRLSConditions(userScope);\r\n  \r\n  switch (tableName) {\r\n    case 'member':\r\n    case 'trainings':\r\n    case 'permanentministryevent':\r\n    case 'budget':\r\n    case 'document':\r\n    case 'contributiondesignation':\r\n      // These tables have regionId, universityId, smallGroupId, alumniGroupId\r\n      return rlsConditions;\r\n    \r\n    case 'university':\r\n      // Universities only have regionId\r\n      return rlsConditions.regionId ? { regionId: rlsConditions.regionId } : {};\r\n    \r\n    case 'smallgroup':\r\n      // Small groups have regionId and universityId\r\n      return {\r\n        ...(rlsConditions.regionId && { regionId: rlsConditions.regionId }),\r\n        ...(rlsConditions.universityId && { universityId: rlsConditions.universityId })\r\n      };\r\n    \r\n    case 'alumnismallgroup':\r\n      // Alumni groups have regionId\r\n      return rlsConditions.regionId ? { regionId: rlsConditions.regionId } : {};\r\n    \r\n    case 'region':\r\n      // Regions don't have foreign keys, so we need to check if user has access to specific regions\r\n      if (userScope.scope === 'region' && userScope.regionId) {\r\n        return { id: userScope.regionId };\r\n      }\r\n      return {};\r\n    \r\n    default:\r\n      return rlsConditions;\r\n  }\r\n}\r\n","import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/attendance/route\",\n        pathname: \"/api/attendance\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/app/api/attendance/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/attendance/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { getUserScope, getTableRLSConditions } from \"@/lib/rls\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n    try {\r\n        const { searchParams } = new URL(request.url);\r\n        \r\n        // Get user scope for RLS\r\n        const userScope = await getUserScope();\r\n        if (!userScope) {\r\n            return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n        }\r\n        \r\n        const where: Record<string, unknown> = {};\r\n        \r\n        // Event and status filters\r\n        if (searchParams.has(\"eventId\")) {\r\n            where.permanentEventId = Number(searchParams.get(\"eventId\"));\r\n        }\r\n        if (searchParams.has(\"status\")) {\r\n            where.status = searchParams.get(\"status\");\r\n        }\r\n        \r\n        // Date filters\r\n        if (searchParams.has(\"dateFrom\") || searchParams.has(\"dateTo\")) {\r\n            where.recordedAt = {};\r\n            if (searchParams.has(\"dateFrom\") && searchParams.get(\"dateFrom\")) {\r\n                const dateFrom = new Date(searchParams.get(\"dateFrom\")!);\r\n                dateFrom.setHours(0, 0, 0, 0);\r\n                where.recordedAt.gte = dateFrom;\r\n            }\r\n            if (searchParams.has(\"dateTo\") && searchParams.get(\"dateTo\")) {\r\n                const dateTo = new Date(searchParams.get(\"dateTo\")!);\r\n                dateTo.setHours(23, 59, 59, 999);\r\n                where.recordedAt.lte = dateTo;\r\n            }\r\n        }\r\n        \r\n        // Apply RLS conditions for member filters\r\n        const memberRLSConditions = getTableRLSConditions(userScope, 'member');\r\n        where.member = { ...memberRLSConditions };\r\n        \r\n        // Override with explicit filters for super admin\r\n        if (userScope.scope === 'superadmin') {\r\n            const hasExplicitFilters = searchParams.has(\"regionId\") || searchParams.has(\"universityId\") || \r\n                searchParams.has(\"smallGroupId\") || searchParams.has(\"alumniGroupId\");\r\n            \r\n            if (hasExplicitFilters) {\r\n                where.member = {};\r\n                \r\n                if (searchParams.has(\"regionId\")) {\r\n                    where.member.regionId = Number(searchParams.get(\"regionId\"));\r\n                }\r\n                if (searchParams.has(\"universityId\")) {\r\n                    where.member.universityId = Number(searchParams.get(\"universityId\"));\r\n                }\r\n                if (searchParams.has(\"smallGroupId\")) {\r\n                    where.member.smallGroupId = Number(searchParams.get(\"smallGroupId\"));\r\n                }\r\n                if (searchParams.has(\"alumniGroupId\")) {\r\n                    where.member.alumniGroupId = Number(searchParams.get(\"alumniGroupId\"));\r\n                }\r\n            }\r\n        }\r\n        \r\n        const attendance = await prisma.attendance.findMany({\r\n            where,\r\n            include: {\r\n                member: { \r\n                    select: { \r\n                        id: true, \r\n                        firstname: true, \r\n                        secondname: true,\r\n                        regionId: true,\r\n                        universityId: true,\r\n                        smallGroupId: true,\r\n                        alumniGroupId: true\r\n                    } \r\n                },\r\n                permanentministryevent: { select: { id: true, name: true } },\r\n                trainings: { select: { id: true, name: true } }\r\n            },\r\n            orderBy: { recordedAt: 'desc' }\r\n        });\r\n        return NextResponse.json(attendance, { status: 200 });\r\n    } catch (error) {\r\n        console.error(\"Error fetching attendance records:\", error);\r\n        return NextResponse.json({ error: 'Failed to fetch attendance records' }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n    try {\r\n        // Get user scope for RLS\r\n        const userScope = await getUserScope();\r\n        if (!userScope) {\r\n            return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n        }\r\n        \r\n        const body = await request.json();\r\n        \r\n        if (!Array.isArray(body)) {\r\n            return NextResponse.json({ error: \"Expected an array of attendance records\" }, { status: 400 });\r\n        }\r\n\r\n        const results = [];\r\n        for (const record of body) {\r\n            const { memberId, status, permanentEventId, trainingId, notes } = record;\r\n\r\n            if (!memberId) {\r\n                results.push({ error: \"Member ID is required\", data: record });\r\n                continue;\r\n            }\r\n\r\n            if (!status || !['present', 'absent', 'excused'].includes(status)) {\r\n                results.push({ error: \"Valid status (present, absent, excused) is required\", data: record });\r\n                continue;\r\n            }\r\n\r\n            if (!permanentEventId && !trainingId) {\r\n                results.push({ error: \"Either permanent event ID or training ID is required\", data: record });\r\n                continue;\r\n            }\r\n\r\n            try {\r\n                // Check if member exists and user has access\r\n                const member = await prisma.member.findUnique({\r\n                    where: { id: Number(memberId) }\r\n                });\r\n\r\n                if (!member) {\r\n                    results.push({ error: \"Member not found\", data: record });\r\n                    continue;\r\n                }\r\n\r\n                // Apply RLS check for member access\r\n                const memberRLSConditions = getTableRLSConditions(userScope, 'member');\r\n                const hasMemberAccess = Object.keys(memberRLSConditions).every(key => {\r\n                    if (memberRLSConditions[key] === null || memberRLSConditions[key] === undefined) return true;\r\n                    return member[key] === memberRLSConditions[key];\r\n                });\r\n\r\n                if (!hasMemberAccess) {\r\n                    results.push({ error: \"Access denied to member\", data: record });\r\n                    continue;\r\n                }\r\n\r\n                // Check if event exists and user has access (if provided)\r\n                if (permanentEventId) {\r\n                    const event = await prisma.permanentministryevent.findUnique({\r\n                        where: { id: Number(permanentEventId) }\r\n                    });\r\n\r\n                    if (!event) {\r\n                        results.push({ error: \"Event not found\", data: record });\r\n                        continue;\r\n                    }\r\n\r\n                    // Apply RLS check for event access\r\n                    const eventRLSConditions = getTableRLSConditions(userScope, 'permanentministryevent');\r\n                    const hasEventAccess = Object.keys(eventRLSConditions).every(key => {\r\n                        if (eventRLSConditions[key] === null || eventRLSConditions[key] === undefined) return true;\r\n                        return event[key] === eventRLSConditions[key];\r\n                    });\r\n\r\n                    if (!hasEventAccess) {\r\n                        results.push({ error: \"Access denied to event\", data: record });\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                // Check if training exists (if provided)\r\n                if (trainingId) {\r\n                    const training = await prisma.trainings.findUnique({\r\n                        where: { id: Number(trainingId) }\r\n                    });\r\n\r\n                    if (!training) {\r\n                        results.push({ error: \"Training not found\", data: record });\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                const attendanceData: Record<string, unknown> = {\r\n                    memberId: Number(memberId),\r\n                    status: status,\r\n                    notes: notes || null,\r\n                };\r\n                \r\n                if (permanentEventId) attendanceData.permanentEventId = Number(permanentEventId);\r\n                if (trainingId) attendanceData.trainingId = Number(trainingId);\r\n\r\n                const created = await prisma.attendance.create({\r\n                    data: attendanceData,\r\n                });\r\n            \r\n                results.push({ success: true, data: created });\r\n            } catch (error: unknown) {\r\n                let errorMessage = \"Could not create attendance record.\";\r\n                if (error && typeof error === 'object' && 'code' in error && error.code === 'P2002') {\r\n                    const target = (error.meta && typeof error.meta === 'object' && 'target' in error.meta ? error.meta.target as string[] : []) || [];\r\n                    if (target.includes('permanentEventId')) {\r\n                         errorMessage = \"Attendance already recorded for this member and event.\";\r\n                    } else if (target.includes('trainingId')) {\r\n                         errorMessage = \"Attendance already recorded for this member and training.\";\r\n                    } else {\r\n                         errorMessage = \"This attendance record already exists.\";\r\n                    }\r\n                } else if (error && typeof error === 'object' && 'code' in error && error.code === 'P2003') {\r\n                    errorMessage = \"The specified member, event, or training does not exist.\";\r\n                }\r\n                results.push({ error: errorMessage, data: record });\r\n            }\r\n        }\r\n        return NextResponse.json({ results }, { status: 201 });\r\n    } catch (error) {\r\n        console.error(\"Error creating attendance records:\", error);\r\n        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function PUT(request: NextRequest) {\r\n    try {\r\n        const { searchParams } = new URL(request.url);\r\n        const attendanceId = searchParams.get(\"id\");\r\n\r\n        if (!attendanceId) {\r\n            return NextResponse.json(\r\n                { error: \"Attendance ID is required\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        const body = await request.json();\r\n        const { status, notes } = body;\r\n\r\n        if (!status || !['present', 'absent', 'excused'].includes(status)) {\r\n            return NextResponse.json(\r\n                { error: \"Valid status (present, absent, excused) is required\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        // Check if attendance record exists\r\n        const existingAttendance = await prisma.attendance.findUnique({\r\n            where: { id: Number(attendanceId) }\r\n        });\r\n\r\n        if (!existingAttendance) {\r\n            return NextResponse.json(\r\n                { error: \"Attendance record not found\" },\r\n                { status: 404 }\r\n            );\r\n        }\r\n\r\n        const updatedAttendance = await prisma.attendance.update({\r\n            where: { id: Number(attendanceId) },\r\n            data: {\r\n                status: status,\r\n                notes: notes || null,\r\n            },\r\n            include: {\r\n                member: { select: { id: true, firstname: true, secondname: true } },\r\n                permanentministryevent: { select: { id: true, name: true } },\r\n                trainings: { select: { id: true, name: true } }\r\n            }\r\n        });\r\n\r\n        return NextResponse.json(updatedAttendance, { status: 200 });\r\n    } catch (error) {\r\n        console.error(\"Error updating attendance record:\", error);\r\n        return NextResponse.json({ error: 'Failed to update attendance record' }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n    try {\r\n        const { searchParams } = new URL(request.url);\r\n        const attendanceId = searchParams.get(\"id\");\r\n\r\n        if (!attendanceId) {\r\n            return NextResponse.json(\r\n                { error: \"Attendance ID is required\" },\r\n                { status: 400 }\r\n            );\r\n        }\r\n\r\n        // Check if attendance record exists\r\n        const existingAttendance = await prisma.attendance.findUnique({\r\n            where: { id: Number(attendanceId) }\r\n        });\r\n\r\n        if (!existingAttendance) {\r\n            return NextResponse.json(\r\n                { error: \"Attendance record not found\" },\r\n                { status: 404 }\r\n            );\r\n        }\r\n\r\n        await prisma.attendance.delete({\r\n            where: { id: Number(attendanceId) }\r\n        });\r\n\r\n        return NextResponse.json(\r\n            { message: \"Attendance record deleted successfully\" },\r\n            { status: 200 }\r\n        );\r\n    } catch (error) {\r\n        console.error(\"Error deleting attendance record:\", error);\r\n        return NextResponse.json({ error: 'Failed to delete attendance record' }, { status: 500 });\r\n    }\r\n}"],"names":[],"mappings":"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","ignoreList":[1]}