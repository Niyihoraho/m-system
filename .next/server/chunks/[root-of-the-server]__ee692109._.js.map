{"version":3,"sources":["turbopack:///[project]/lib/rls.ts","turbopack:///[project]/app/api/validation/member.ts"],"sourcesContent":["import { auth } from \"@/lib/auth\";\r\n\r\n// User scope interface\r\nexport interface UserScope {\r\n  scope: 'superadmin' | 'national' | 'region' | 'university' | 'smallgroup' | 'alumnismallgroup';\r\n  regionId?: number | null;\r\n  universityId?: number | null;\r\n  smallGroupId?: number | null;\r\n  alumniGroupId?: number | null;\r\n}\r\n\r\n// RLS conditions interface\r\nexport interface RLSConditions {\r\n  regionId?: number;\r\n  universityId?: number;\r\n  smallGroupId?: number;\r\n  alumniGroupId?: number;\r\n}\r\n\r\n/**\r\n * Get the current user's scope from the session\r\n * Returns the most restrictive scope if user has multiple roles\r\n */\r\nexport async function getUserScope(): Promise<UserScope | null> {\r\n  try {\r\n    const session = await auth();\r\n    \r\n    if (!session?.user?.roles || session.user.roles.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Get the most restrictive scope (highest priority)\r\n    const roles = session.user.roles;\r\n    \r\n    // Priority order: superadmin > national > region > university > smallgroup > alumnismallgroup\r\n    const scopePriority = {\r\n      'superadmin': 1,\r\n      'national': 2,\r\n      'region': 3,\r\n      'university': 4,\r\n      'smallgroup': 5,\r\n      'alumnismallgroup': 6\r\n    };\r\n\r\n    // Find the role with the highest priority (most restrictive)\r\n    const primaryRole = roles.reduce((prev, current) => {\r\n      const prevPriority = scopePriority[prev.scope as keyof typeof scopePriority] || 999;\r\n      const currentPriority = scopePriority[current.scope as keyof typeof scopePriority] || 999;\r\n      return currentPriority < prevPriority ? current : prev;\r\n    });\r\n\r\n    return {\r\n      scope: primaryRole.scope as UserScope['scope'],\r\n      regionId: primaryRole.regionId,\r\n      universityId: primaryRole.universityId,\r\n      smallGroupId: primaryRole.smallGroupId,\r\n      alumniGroupId: primaryRole.alumniGroupId\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting user scope:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Generate RLS conditions based on user scope\r\n * Returns an object with the appropriate WHERE conditions for database queries\r\n */\r\nexport function generateRLSConditions(userScope: UserScope): RLSConditions {\r\n  const conditions: RLSConditions = {};\r\n\r\n  // Superadmin has access to everything - no conditions needed\r\n  if (userScope.scope === 'superadmin') {\r\n    return conditions;\r\n  }\r\n\r\n  // National scope - access to all regions (no filtering needed for now)\r\n  if (userScope.scope === 'national') {\r\n    return conditions;\r\n  }\r\n\r\n  // Region scope - access to specific region and all its children\r\n  if (userScope.scope === 'region' && userScope.regionId) {\r\n    conditions.regionId = userScope.regionId;\r\n    return conditions;\r\n  }\r\n\r\n  // University scope - access to specific university and its small groups\r\n  if (userScope.scope === 'university' && userScope.universityId) {\r\n    conditions.universityId = userScope.universityId;\r\n    // Also include regionId for consistency\r\n    if (userScope.regionId) {\r\n      conditions.regionId = userScope.regionId;\r\n    }\r\n    return conditions;\r\n  }\r\n\r\n  // Small group scope - access to specific small group only\r\n  if (userScope.scope === 'smallgroup' && userScope.smallGroupId) {\r\n    conditions.smallGroupId = userScope.smallGroupId;\r\n    // Include parent IDs for consistency\r\n    if (userScope.universityId) {\r\n      conditions.universityId = userScope.universityId;\r\n    }\r\n    if (userScope.regionId) {\r\n      conditions.regionId = userScope.regionId;\r\n    }\r\n    return conditions;\r\n  }\r\n\r\n  // Alumni small group scope - access to specific alumni group only\r\n  if (userScope.scope === 'alumnismallgroup' && userScope.alumniGroupId) {\r\n    conditions.alumniGroupId = userScope.alumniGroupId;\r\n    // Include regionId for consistency\r\n    if (userScope.regionId) {\r\n      conditions.regionId = userScope.regionId;\r\n    }\r\n    return conditions;\r\n  }\r\n\r\n  // If no valid scope found, return empty conditions (no access)\r\n  return conditions;\r\n}\r\n\r\n/**\r\n * Check if user has permission to access a specific resource\r\n */\r\nexport function hasPermission(\r\n  userScope: UserScope,\r\n  resourceType: 'region' | 'university' | 'smallgroup' | 'alumnismallgroup',\r\n  resourceId: number\r\n): boolean {\r\n  // Superadmin has access to everything\r\n  if (userScope.scope === 'superadmin') {\r\n    return true;\r\n  }\r\n\r\n  // National scope has access to everything\r\n  if (userScope.scope === 'national') {\r\n    return true;\r\n  }\r\n\r\n  switch (resourceType) {\r\n    case 'region':\r\n      return userScope.scope === 'region' && userScope.regionId === resourceId;\r\n    \r\n    case 'university':\r\n      return (userScope.scope === 'university' && userScope.universityId === resourceId) ||\r\n             (userScope.scope === 'region' && userScope.regionId !== null);\r\n    \r\n    case 'smallgroup':\r\n      return (userScope.scope === 'smallgroup' && userScope.smallGroupId === resourceId) ||\r\n             (userScope.scope === 'university' && userScope.universityId !== null) ||\r\n             (userScope.scope === 'region' && userScope.regionId !== null);\r\n    \r\n    case 'alumnismallgroup':\r\n      return (userScope.scope === 'alumnismallgroup' && userScope.alumniGroupId === resourceId) ||\r\n             (userScope.scope === 'region' && userScope.regionId !== null);\r\n    \r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Get RLS conditions for specific tables\r\n * Some tables don't have all the foreign key columns, so we need to map appropriately\r\n */\r\nexport function getTableRLSConditions(userScope: UserScope, tableName: string): any {\r\n  const rlsConditions = generateRLSConditions(userScope);\r\n  \r\n  switch (tableName) {\r\n    case 'member':\r\n    case 'trainings':\r\n    case 'permanentministryevent':\r\n    case 'budget':\r\n    case 'document':\r\n    case 'contributiondesignation':\r\n      // These tables have regionId, universityId, smallGroupId, alumniGroupId\r\n      return rlsConditions;\r\n    \r\n    case 'university':\r\n      // Universities only have regionId\r\n      return rlsConditions.regionId ? { regionId: rlsConditions.regionId } : {};\r\n    \r\n    case 'smallgroup':\r\n      // Small groups have regionId and universityId\r\n      return {\r\n        ...(rlsConditions.regionId && { regionId: rlsConditions.regionId }),\r\n        ...(rlsConditions.universityId && { universityId: rlsConditions.universityId })\r\n      };\r\n    \r\n    case 'alumnismallgroup':\r\n      // Alumni groups have regionId\r\n      return rlsConditions.regionId ? { regionId: rlsConditions.regionId } : {};\r\n    \r\n    case 'region':\r\n      // Regions don't have foreign keys, so we need to check if user has access to specific regions\r\n      if (userScope.scope === 'region' && userScope.regionId) {\r\n        return { id: userScope.regionId };\r\n      }\r\n      return {};\r\n    \r\n    default:\r\n      return rlsConditions;\r\n  }\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport const createMemberSchema = z.object({\r\n    firstname: z.string().min(1, \"First Name is required\").max(255, \"First Name cannot exceed 255 characters\"),\r\n    secondname: z.string().min(1, \"Second Name is required\").max(255, \"Second Name cannot exceed 255 characters\"),\r\n    gender: z.enum([\"male\", \"female\", \"Male\", \"Female\"]).optional().or(z.literal(\"\")).or(z.null()),\r\n    birthdate: z.string().optional().or(z.literal(\"\")).or(z.null()).transform((val) => {\r\n        if (!val || val === \"\" || val === null) return null;\r\n        const date = new Date(val);\r\n        return isNaN(date.getTime()) ? null : date;\r\n    }),\r\n    placeOfBirthProvince: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    placeOfBirthDistrict: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    placeOfBirthSector: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    placeOfBirthCell: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    placeOfBirthVillage: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    localChurch: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    email: z.string().email(\"Invalid Email\").max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    phone: z.string().max(20, \"Phone cannot exceed 20 characters\").optional().or(z.literal(\"\")).or(z.null()),\r\n    type: z.enum([\"student\", \"graduate\", \"staff\", \"volunteer\", \"alumni\", \"Student\", \"Graduate\", \"Staff\", \"Volunteer\", \"Alumni\"]),\r\n    status: z.enum([\"active\", \"pre_graduate\", \"graduate\", \"alumni\", \"inactive\", \"Active\", \"Pre_graduate\", \"Graduate\", \"Alumni\", \"Inactive\"]).optional().default(\"active\"),\r\n    regionId: z.union([\r\n        z.string().transform((val) => {\r\n            if (!val || val === \"\" || val === null) return null;\r\n            const num = Number(val);\r\n            return isNaN(num) ? null : num;\r\n        }),\r\n        z.number().int().positive(),\r\n        z.null()\r\n    ]).optional(),\r\n    smallGroupId: z.union([\r\n        z.string().transform((val) => {\r\n            if (!val || val === \"\" || val === null) return null;\r\n            const num = Number(val);\r\n            return isNaN(num) ? null : num;\r\n        }),\r\n        z.number().int().positive(),\r\n        z.null()\r\n    ]).optional(),\r\n    universityId: z.union([\r\n        z.string().transform((val) => {\r\n            if (!val || val === \"\" || val === null) return null;\r\n            const num = Number(val);\r\n            return isNaN(num) ? null : num;\r\n        }),\r\n        z.number().int().positive(),\r\n        z.null()\r\n    ]).optional(),\r\n    alumniGroupId: z.union([\r\n        z.string().transform((val) => {\r\n            if (!val || val === \"\" || val === null) return null;\r\n            const num = Number(val);\r\n            return isNaN(num) ? null : num;\r\n        }),\r\n        z.number().int().positive(),\r\n        z.null()\r\n    ]).optional(),\r\n    graduationDate: z.string().optional().or(z.literal(\"\")).or(z.null()).transform((val) => {\r\n        if (!val || val === \"\" || val === null) return null;\r\n        const date = new Date(val);\r\n        return isNaN(date.getTime()) ? null : date;\r\n    }),\r\n    faculty: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    professionalism: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n    maritalStatus: z.string().max(255).optional().or(z.literal(\"\")).or(z.null()),\r\n});"],"names":[],"mappings":"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"}