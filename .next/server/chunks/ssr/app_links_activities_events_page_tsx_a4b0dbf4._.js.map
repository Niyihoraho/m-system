{"version":3,"sources":["turbopack:///[project]/app/links/activities/events/page.tsx","turbopack:///[project]/components/add-event-modal.tsx","turbopack:///[project]/components/delete-event-modal.tsx","turbopack:///[project]/components/edit-event-modal.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Search, RefreshCw, Plus, Edit, Trash2, Calendar } from 'lucide-react';\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { AddEventModal } from \"@/components/add-event-modal\";\nimport { DeleteEventModal } from \"@/components/delete-event-modal\";\nimport { EditEventModal } from \"@/components/edit-event-modal\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  SidebarInset,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\n\ninterface Event {\n  id: number;\n  name: string;\n  type: string;\n  regionId: number;\n  universityId: number | null;\n  smallGroupId: number | null;\n  alumniGroupId: number | null;\n  isActive: boolean;\n  region: { name: string };\n  university: { name: string } | null;\n  smallGroup: { name: string } | null;\n  alumniGroup: { name: string } | null;\n}\n\nexport default function EventsPage() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [events, setEvents] = useState<Event[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [deleteModal, setDeleteModal] = useState<{\n    isOpen: boolean;\n    eventId: number | null;\n    eventName: string;\n  }>({\n    isOpen: false,\n    eventId: null,\n    eventName: ''\n  });\n  const [deleting, setDeleting] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n\n  // Fetch events from API\n  const fetchEvents = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await axios.get('/api/events');\n      setEvents(response.data);\n    } catch (err) {\n      console.error('Error fetching events:', err);\n      setError('Failed to fetch events. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Open delete confirmation modal\n  const openDeleteModal = (eventId: number, eventName: string) => {\n    setDeleteModal({\n      isOpen: true,\n      eventId,\n      eventName\n    });\n  };\n\n  // Close delete confirmation modal\n  const closeDeleteModal = () => {\n    setDeleteModal({\n      isOpen: false,\n      eventId: null,\n      eventName: ''\n    });\n  };\n\n  // Open edit modal\n  const openEditModal = (event: Event) => {\n    setEditingEvent(event);\n  };\n\n  // Close edit modal\n  const closeEditModal = () => {\n    setEditingEvent(null);\n  };\n\n  // Delete event function\n  const deleteEvent = async () => {\n    if (!deleteModal.eventId) return;\n\n    setDeleting(true);\n    \n    try {\n      const response = await axios.delete(`/api/events?id=${deleteModal.eventId}`);\n      \n      if (response.status === 200) {\n        // Remove the event from the local state\n        setEvents(prev => prev.filter(event => event.id !== deleteModal.eventId));\n        \n        // Close the modal\n        closeDeleteModal();\n        \n        // Show success message (you could add a toast notification here)\n        console.log('Event deleted successfully');\n      }\n    } catch (err) {\n      console.error('Error deleting event:', err);\n      alert('Failed to delete event. Please try again.');\n    } finally {\n      setDeleting(false);\n    }\n  };\n\n  // Load events on component mount\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n\n  const filteredEvents = events.filter(event => {\n    if (!searchTerm) return true;\n    \n    const searchLower = searchTerm.toLowerCase();\n    \n    return (\n      event.name?.toLowerCase().includes(searchLower) ||\n      event.type?.toLowerCase().includes(searchLower) ||\n      event.region?.name?.toLowerCase().includes(searchLower) ||\n      event.university?.name?.toLowerCase().includes(searchLower) ||\n      event.smallGroup?.name?.toLowerCase().includes(searchLower) ||\n      event.alumniGroup?.name?.toLowerCase().includes(searchLower)\n    );\n  });\n\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <SidebarInset>\n        <header className=\"flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-data-[collapsible=icon]/sidebar-wrapper:h-12\">\n          <div className=\"flex items-center gap-2 px-4\">\n            <SidebarTrigger className=\"-ml-1\" />\n            <Separator\n              orientation=\"vertical\"\n              className=\"mr-2 data-[orientation=vertical]:h-4\"\n            />\n            <Breadcrumb>\n              <BreadcrumbList>\n                <BreadcrumbItem className=\"hidden md:block\">\n                  <BreadcrumbLink href=\"/dashboard\">\n                    Dashboard\n                  </BreadcrumbLink>\n                </BreadcrumbItem>\n                <BreadcrumbSeparator className=\"hidden md:block\" />\n                <BreadcrumbItem>\n                  <BreadcrumbLink href=\"/links/activities\">\n                    Activities\n                  </BreadcrumbLink>\n                </BreadcrumbItem>\n                <BreadcrumbSeparator />\n                <BreadcrumbItem>\n                  <BreadcrumbPage>Events</BreadcrumbPage>\n                </BreadcrumbItem>\n              </BreadcrumbList>\n            </Breadcrumb>\n          </div>\n        </header>\n        <div className=\"flex flex-1 flex-col gap-4 p-2 sm:p-4 pt-0\">\n          <div className=\"max-w-7xl mx-auto w-full\">\n            {/* Header */}\n            <div className=\"mb-4 sm:mb-6 lg:mb-8\">\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-foreground mb-1 sm:mb-2\">Events Management</h1>\n              <p className=\"text-sm sm:text-base text-muted-foreground\">Manage events and their information across the organization</p>\n            </div>\n\n            {/* Search and Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 items-stretch sm:items-center justify-between mb-4 sm:mb-6\">\n              <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-3 flex-1\">\n                {/* Search */}\n                <div className=\"relative flex-1 max-w-md\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search events...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-full pl-10 pr-4 py-2 sm:py-2.5 bg-muted/30 border border-border/20 rounded-lg focus:ring-2 focus:ring-primary/20 focus:border-primary/50 focus:bg-muted/50 transition-all duration-200 text-foreground placeholder:text-muted-foreground text-sm sm:text-base\"\n                  />\n                </div>\n\n                {/* Refresh Button */}\n                <button \n                  onClick={fetchEvents}\n                  disabled={loading}\n                  className=\"flex items-center justify-center gap-2 px-3 sm:px-4 py-2 sm:py-2.5 text-foreground bg-muted/30 hover:bg-muted/50 border border-border/20 hover:border-border/40 rounded-lg transition-all duration-200 text-sm sm:text-base disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\n                  <span className=\"hidden sm:inline\">{loading ? 'Loading...' : 'Refresh'}</span>\n                </button>\n              </div>\n\n              {/* Add New Event Button */}\n              <AddEventModal onEventAdded={fetchEvents}>\n                <button className=\"flex items-center justify-center gap-2 px-4 sm:px-6 py-2 sm:py-2.5 bg-muted text-foreground hover:bg-muted/80 rounded-md transition-all duration-200 shadow-sm text-sm sm:text-base\">\n                  <Plus className=\"w-4 h-4\" />\n                  <span className=\"hidden sm:inline\">Add New Event</span>\n                  <span className=\"sm:hidden\">Add Event</span>\n                </button>\n              </AddEventModal>\n            </div>\n\n            {/* Error State */}\n            {error && (\n              <div className=\"bg-destructive/10 border border-destructive/20 rounded-lg p-4 mb-6\">\n                <div className=\"flex items-center gap-2 text-destructive\">\n                  <span className=\"text-sm font-medium\">Error:</span>\n                  <span className=\"text-sm\">{error}</span>\n                </div>\n                <button \n                  onClick={fetchEvents}\n                  className=\"mt-2 text-sm text-destructive hover:text-destructive/80 underline\"\n                >\n                  Try again\n                </button>\n              </div>\n            )}\n\n            {/* Events Table */}\n            <div className=\"bg-card rounded-lg shadow-sm border border-border overflow-hidden\">\n              {loading ? (\n                <div className=\"flex items-center justify-center py-12\">\n                  <div className=\"flex items-center gap-2 text-muted-foreground\">\n                    <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                    <span>Loading events...</span>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full min-w-[800px]\">\n                    <thead className=\"bg-muted/50 border-b border-border\">\n                      <tr>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                          ID\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                          Event Name\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                          Type\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                          Organization\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-3 sm:px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-card divide-y divide-border\">\n                    {filteredEvents.map((event) => (\n                      <tr key={event.id} className=\"hover:bg-muted/50\">\n                        <td className=\"px-3 sm:px-6 py-3 sm:py-4 text-sm font-medium text-foreground\">\n                          {event.id}\n                        </td>\n                        <td className=\"px-3 sm:px-6 py-3 sm:py-4 text-sm text-foreground\">\n                          {event.name}\n                        </td>\n                        <td className=\"px-3 sm:px-6 py-3 sm:py-4 text-sm text-muted-foreground\">\n                          {event.type}\n                        </td>\n                        <td className=\"px-3 sm:px-6 py-3 sm:py-4 text-sm text-muted-foreground\">\n                          <div className=\"space-y-1\">\n                            <div className=\"font-medium\">{event.region?.name}</div>\n                            {event.university && (\n                              <div className=\"text-xs text-muted-foreground\">University: {event.university.name}</div>\n                            )}\n                            {event.smallGroup && (\n                              <div className=\"text-xs text-muted-foreground\">Small Group: {event.smallGroup.name}</div>\n                            )}\n                            {event.alumniGroup && (\n                              <div className=\"text-xs text-muted-foreground\">Alumni Group: {event.alumniGroup.name}</div>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-3 sm:px-6 py-3 sm:py-4 text-sm\">\n                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                            event.isActive \n                              ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' \n                              : 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400'\n                          }`}>\n                            {event.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </td>\n                        <td className=\"px-3 sm:px-6 py-3 sm:py-4 text-sm font-medium\">\n                          <div className=\"flex items-center gap-1 sm:gap-2\">\n                            <button \n                              onClick={() => openEditModal(event)}\n                              className=\"text-muted-foreground hover:text-foreground p-1 rounded\" \n                              title=\"Edit\"\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </button>\n                            <button \n                              onClick={() => openDeleteModal(event.id, event.name)}\n                              className=\"text-destructive hover:text-destructive/80 p-1 rounded\" \n                              title=\"Delete\"\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n\n              {/* Empty State */}\n              {!loading && filteredEvents.length === 0 && !error && (\n                <div className=\"flex flex-col items-center justify-center py-12\">\n                  <Calendar className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">No events found</h3>\n                  <p className=\"text-muted-foreground text-center mb-4\">\n                    {searchTerm ? 'No events match your search criteria.' : 'No events have been added yet.'}\n                  </p>\n                  {!searchTerm && (\n                    <AddEventModal onEventAdded={fetchEvents}>\n                      <button className=\"flex items-center gap-2 px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors\">\n                        <Plus className=\"w-4 h-4\" />\n                        Add First Event\n                      </button>\n                    </AddEventModal>\n                  )}\n                </div>\n              )}\n\n              {/* Table Footer */}\n              {!loading && filteredEvents.length > 0 && (\n                <div className=\"bg-muted/50 px-3 sm:px-6 py-3 border-t border-border\">\n                  <div className=\"flex flex-col sm:flex-row items-center justify-between gap-2 sm:gap-0\">\n                    <div className=\"text-xs sm:text-sm text-muted-foreground text-center sm:text-left\">\n                      Showing <span className=\"font-medium text-foreground\">{filteredEvents.length}</span> of <span className=\"font-medium text-foreground\">{events.length}</span> events\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </SidebarInset>\n      \n      {/* Delete Confirmation Modal */}\n      <DeleteEventModal\n        isOpen={deleteModal.isOpen}\n        onClose={closeDeleteModal}\n        onConfirm={deleteEvent}\n        eventName={deleteModal.eventName}\n        isLoading={deleting}\n      />\n      \n      {/* Edit Event Modal */}\n      <EditEventModal\n        event={editingEvent}\n        onEventUpdated={fetchEvents}\n        isOpen={editingEvent !== null}\n        onClose={closeEditModal}\n      />\n    </SidebarProvider>\n  );\n}\n","\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Button } from \"@/components/ui/ui copy/button\"\r\nimport { Card, CardContent, CardHeader } from \"@/components/ui/ui copy/card\"\r\nimport { Input } from \"@/components/ui/ui copy/input\"\r\nimport { Label } from \"@/components/ui/ui copy/label\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/ui copy/select\"\r\nimport { Checkbox } from \"@/components/ui/ui copy/checkbox\"\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetDescription,\r\n  SheetHeader,\r\n  SheetTitle,\r\n  SheetTrigger,\r\n} from \"@/components/ui/ui copy/sheet\"\r\nimport { Plus, Calendar, MapPin, Building2, Users, GraduationCap, Activity } from \"lucide-react\"\r\nimport { useUserScope } from \"@/hooks/use-user-scope\"\r\n\r\ninterface Region {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\ninterface University {\r\n  id: number;\r\n  name: string;\r\n  regionId: number;\r\n}\r\n\r\ninterface SmallGroup {\r\n  id: number;\r\n  name: string;\r\n  universityId: number;\r\n  regionId: number;\r\n}\r\n\r\ninterface AlumniGroup {\r\n  id: number;\r\n  name: string;\r\n  regionId: number;\r\n}\r\n\r\ninterface AddEventModalProps {\r\n  children: React.ReactNode\r\n  onEventAdded?: () => void\r\n}\r\n\r\nexport function AddEventModal({ children, onEventAdded }: AddEventModalProps) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  const [errors, setErrors] = React.useState<Record<string, string>>({})\r\n  const [success, setSuccess] = React.useState(false)\r\n  \r\n  // Get user scope and visibility rules\r\n  const { userScope, loading: scopeLoading, getVisibleFields, getDefaultValues } = useUserScope()\r\n  const visibleFields = getVisibleFields()\r\n  \r\n  // Memoize default values to prevent infinite re-renders\r\n  const defaultValues = React.useMemo(() => getDefaultValues(), [userScope])\r\n  \r\n  const [regions, setRegions] = React.useState<Region[]>([])\r\n  const [universities, setUniversities] = React.useState<University[]>([])\r\n  const [smallGroups, setSmallGroups] = React.useState<SmallGroup[]>([])\r\n  const [alumniGroups, setAlumniGroups] = React.useState<AlumniGroup[]>([])\r\n  const [formData, setFormData] = React.useState({\r\n    name: \"\",\r\n    type: \"\",\r\n    regionId: \"\",\r\n    universityId: \"\",\r\n    smallGroupId: \"\",\r\n    alumniGroupId: \"\",\r\n    isActive: true,\r\n  })\r\n\r\n  // Initialize form with default values when user scope is loaded\r\n  React.useEffect(() => {\r\n    if (userScope && defaultValues) {\r\n      setFormData(prev => ({\r\n        ...prev,\r\n        regionId: defaultValues.regionId?.toString() || \"\",\r\n        universityId: defaultValues.universityId?.toString() || \"\",\r\n        smallGroupId: defaultValues.smallGroupId?.toString() || \"\",\r\n        alumniGroupId: defaultValues.alumniGroupId?.toString() || \"\",\r\n      }))\r\n    }\r\n  }, [userScope, defaultValues])\r\n\r\n  // Fetch regions on modal open (only if region field is visible)\r\n  React.useEffect(() => {\r\n    if (open && visibleFields.region) {\r\n      fetchRegions()\r\n    }\r\n  }, [open, visibleFields.region])\r\n\r\n  // Fetch universities when region changes (only if university field is visible)\r\n  React.useEffect(() => {\r\n    if (formData.regionId && visibleFields.university) {\r\n      fetchUniversities(Number(formData.regionId))\r\n    } else {\r\n      setUniversities([])\r\n      setFormData(prev => ({ ...prev, universityId: \"\" }))\r\n    }\r\n  }, [formData.regionId, visibleFields.university])\r\n\r\n  // Fetch alumni groups when region changes (only if alumni group field is visible)\r\n  React.useEffect(() => {\r\n    if (formData.regionId && visibleFields.alumniGroup) {\r\n      fetchAlumniGroups(Number(formData.regionId))\r\n    } else {\r\n      setAlumniGroups([])\r\n      setFormData(prev => ({ ...prev, alumniGroupId: \"\" }))\r\n    }\r\n  }, [formData.regionId, visibleFields.alumniGroup])\r\n\r\n  // Fetch small groups when university changes (only if small group field is visible)\r\n  React.useEffect(() => {\r\n    if (visibleFields.smallGroup) {\r\n      // For university-level users, use their university ID\r\n      // For region-level users, use the selected university ID\r\n      const universityId = userScope?.scope === 'university' \r\n        ? userScope.universityId \r\n        : formData.universityId;\r\n      \r\n      if (universityId) {\r\n        fetchSmallGroups(Number(universityId))\r\n      } else {\r\n        setSmallGroups([])\r\n        setFormData(prev => ({ ...prev, smallGroupId: \"\" }))\r\n      }\r\n    }\r\n  }, [formData.universityId, visibleFields.smallGroup, userScope])\r\n\r\n  const fetchRegions = async () => {\r\n    try {\r\n      const response = await fetch('/api/regions')\r\n      const data = await response.json()\r\n      setRegions(data)\r\n    } catch (error) {\r\n      console.error('Error fetching regions:', error)\r\n    }\r\n  }\r\n\r\n  const fetchUniversities = async (regionId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/universities?regionId=${regionId}`)\r\n      const data = await response.json()\r\n      setUniversities(data)\r\n    } catch (error) {\r\n      console.error('Error fetching universities:', error)\r\n    }\r\n  }\r\n\r\n  const fetchSmallGroups = async (universityId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/small-groups?universityId=${universityId}`)\r\n      const data = await response.json()\r\n      setSmallGroups(data)\r\n    } catch (error) {\r\n      console.error('Error fetching small groups:', error)\r\n    }\r\n  }\r\n\r\n  const fetchAlumniGroups = async (regionId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/alumni-small-groups?regionId=${regionId}`)\r\n      const data = await response.json()\r\n      setAlumniGroups(data)\r\n    } catch (error) {\r\n      console.error('Error fetching alumni groups:', error)\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (field: string, value: string | boolean) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }))\r\n    \r\n    // Clear error for this field when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [field]: \"\"\r\n      }))\r\n    }\r\n    \r\n    // Clear success state when user starts typing\r\n    if (success) {\r\n      setSuccess(false)\r\n    }\r\n  }\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {}\r\n    \r\n    if (!formData.name.trim()) {\r\n      newErrors.name = \"Event name is required\"\r\n    }\r\n    \r\n    if (!formData.type.trim()) {\r\n      newErrors.type = \"Event type is required\"\r\n    }\r\n    \r\n    // Only validate region if the field is visible\r\n    if (visibleFields.region && !formData.regionId) {\r\n      newErrors.regionId = \"Region is required\"\r\n    }\r\n    \r\n    setErrors(newErrors)\r\n    return Object.keys(newErrors).length === 0\r\n  }\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    \r\n    if (!validateForm()) {\r\n      return\r\n    }\r\n\r\n    setIsLoading(true)\r\n    \r\n    try {\r\n      const requestData = {\r\n        name: formData.name,\r\n        type: formData.type,\r\n        regionId: formData.regionId ? Number(formData.regionId) : null,\r\n        universityId: formData.universityId ? Number(formData.universityId) : null,\r\n        smallGroupId: formData.smallGroupId ? Number(formData.smallGroupId) : null,\r\n        alumniGroupId: formData.alumniGroupId ? Number(formData.alumniGroupId) : null,\r\n        isActive: formData.isActive\r\n      };\r\n      \r\n      console.log('Creating event data:', requestData)\r\n      \r\n      const response = await fetch('/api/events', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestData)\r\n      })\r\n      \r\n      console.log('Response status:', response.status)\r\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()))\r\n      \r\n      const data = await response.json()\r\n      \r\n      console.log('API response data:', data)\r\n      \r\n      if (response.ok) {\r\n        // Show success message\r\n        setSuccess(true)\r\n        setErrors({})\r\n        \r\n        // Reset form\r\n        setFormData({\r\n          name: \"\",\r\n          type: \"\",\r\n          regionId: \"\",\r\n          universityId: \"\",\r\n          smallGroupId: \"\",\r\n          alumniGroupId: \"\",\r\n          isActive: true,\r\n        })\r\n        \r\n        // Call the callback to refresh the events list\r\n        if (onEventAdded) {\r\n          onEventAdded()\r\n        }\r\n        \r\n        // Close modal after a short delay\r\n        setTimeout(() => {\r\n          setOpen(false)\r\n          setSuccess(false)\r\n        }, 1500)\r\n      } else {\r\n        // Handle API errors\r\n        console.error('API Error:', data)\r\n        setErrors({ general: data.error || \"Failed to create event\" })\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error creating event:\", error)\r\n      setErrors({ general: \"An unexpected error occurred\" })\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Sheet open={open} onOpenChange={setOpen}>\r\n      <SheetTrigger asChild>\r\n        {children}\r\n      </SheetTrigger>\r\n      <SheetContent side=\"top\" className=\"h-full w-full max-w-none overflow-y-auto\">\r\n        <div className=\"container mx-auto max-w-2xl py-8\">\r\n          <SheetHeader className=\"pb-8 text-center\">\r\n            <SheetTitle className=\"flex items-center justify-center gap-3 text-2xl\">\r\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-lg bg-primary/10\">\r\n                <Plus className=\"h-6 w-6 text-primary\" />\r\n              </div>\r\n              Add New Event\r\n            </SheetTitle>\r\n            <SheetDescription className=\"text-lg text-muted-foreground\">\r\n              Add a new event to your organization.\r\n            </SheetDescription>\r\n          </SheetHeader>\r\n          \r\n          <Card className=\"shadow-lg\">\r\n            <CardHeader className=\"pb-6\">\r\n              <div className=\"text-center\">\r\n                <h3 className=\"text-lg font-semibold\">Event Information</h3>\r\n                <p className=\"text-sm text-muted-foreground\">Fill in the details below to add a new event</p>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {scopeLoading ? (\r\n                <div className=\"flex items-center justify-center py-8\">\r\n                  <div className=\"text-sm text-muted-foreground\">Loading user scope...</div>\r\n                </div>\r\n              ) : (\r\n                <form onSubmit={handleSubmit} className=\"flex flex-col gap-6\">\r\n                  {errors.general && (\r\n                    <div className=\"p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md\">\r\n                      {errors.general}\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Show scope information for non-superadmin users */}\r\n                  {userScope && userScope.scope !== 'superadmin' && (\r\n                    <div className=\"p-3 text-sm bg-blue-50 border border-blue-200 rounded-md\">\r\n                      <div className=\"font-medium text-blue-800\">Current Scope: {userScope.scope}</div>\r\n                      {userScope.region && (\r\n                        <div className=\"text-blue-700\">Region: {userScope.region.name}</div>\r\n                      )}\r\n                      {userScope.university && (\r\n                        <div className=\"text-blue-700\">University: {userScope.university.name}</div>\r\n                      )}\r\n                      {userScope.smallGroup && (\r\n                        <div className=\"text-blue-700\">Small Group: {userScope.smallGroup.name}</div>\r\n                      )}\r\n                      {userScope.alumniGroup && (\r\n                        <div className=\"text-blue-700\">Alumni Group: {userScope.alumniGroup.name}</div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n\r\n                {/* Event Information */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"text-md font-semibold text-foreground border-b pb-2\">Event Details</h4>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"name\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                      <Calendar className=\"h-4 w-4\" />\r\n                      Event Name *\r\n                    </Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      placeholder=\"Enter event name\"\r\n                      className=\"h-11\"\r\n                      value={formData.name}\r\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\r\n                      required\r\n                    />\r\n                    {errors.name && <p className=\"text-sm text-red-600\">{errors.name}</p>}\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"type\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                      <Activity className=\"h-4 w-4\" />\r\n                      Event Type *\r\n                    </Label>\r\n                    <Select\r\n                      value={formData.type}\r\n                      onValueChange={(value) => handleInputChange(\"type\", value)}\r\n                    >\r\n                      <SelectTrigger className=\"h-11\">\r\n                        <SelectValue placeholder=\"Select event type\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"bible_study\">Bible Study</SelectItem>\r\n                        <SelectItem value=\"discipleship\">Discipleship</SelectItem>\r\n                        <SelectItem value=\"evangelism\">Evangelism</SelectItem>\r\n                        <SelectItem value=\"cell_meeting\">Cell Meeting</SelectItem>\r\n                        <SelectItem value=\"alumni_meeting\">Alumni Meeting</SelectItem>\r\n                        <SelectItem value=\"other\">Other</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                    {errors.type && <p className=\"text-sm text-red-600\">{errors.type}</p>}\r\n                  </div>\r\n\r\n                  {visibleFields.region && (\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"regionId\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <MapPin className=\"h-4 w-4\" />\r\n                        Region *\r\n                      </Label>\r\n                      <Select\r\n                        value={formData.regionId}\r\n                        onValueChange={(value) => handleInputChange(\"regionId\", value)}\r\n                      >\r\n                        <SelectTrigger className=\"h-11\">\r\n                          <SelectValue placeholder=\"Select a region\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {regions.map((region) => (\r\n                            <SelectItem key={region.id} value={region.id.toString()}>\r\n                              {region.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      {errors.regionId && <p className=\"text-sm text-red-600\">{errors.regionId}</p>}\r\n                    </div>\r\n                  )}\r\n\r\n                  {visibleFields.university && (\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"universityId\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Building2 className=\"h-4 w-4\" />\r\n                        University (Optional)\r\n                      </Label>\r\n                      <Select\r\n                        value={formData.universityId}\r\n                        onValueChange={(value) => handleInputChange(\"universityId\", value)}\r\n                        disabled={!formData.regionId}\r\n                      >\r\n                        <SelectTrigger className=\"h-11\">\r\n                          <SelectValue placeholder={formData.regionId ? \"Select a university (optional)\" : \"Select a region first\"} />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {universities.map((university) => (\r\n                            <SelectItem key={university.id} value={university.id.toString()}>\r\n                              {university.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  )}\r\n\r\n                  {visibleFields.smallGroup && (\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"smallGroupId\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Users className=\"h-4 w-4\" />\r\n                        Small Group (Optional)\r\n                      </Label>\r\n                      <Select\r\n                        value={formData.smallGroupId}\r\n                        onValueChange={(value) => handleInputChange(\"smallGroupId\", value)}\r\n                        disabled={userScope?.scope !== 'university' && !formData.universityId}\r\n                      >\r\n                        <SelectTrigger className=\"h-11\">\r\n                          <SelectValue placeholder={\r\n                            userScope?.scope === 'university' \r\n                              ? \"Select a small group (optional)\" \r\n                              : formData.universityId \r\n                                ? \"Select a small group (optional)\" \r\n                                : \"Select a university first\"\r\n                          } />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {smallGroups.map((smallGroup) => (\r\n                            <SelectItem key={smallGroup.id} value={smallGroup.id.toString()}>\r\n                              {smallGroup.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  )}\r\n\r\n                  {visibleFields.alumniGroup && (\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"alumniGroupId\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <GraduationCap className=\"h-4 w-4\" />\r\n                        Alumni Group (Optional)\r\n                      </Label>\r\n                      <Select\r\n                        value={formData.alumniGroupId}\r\n                        onValueChange={(value) => handleInputChange(\"alumniGroupId\", value)}\r\n                        disabled={!formData.regionId}\r\n                      >\r\n                        <SelectTrigger className=\"h-11\">\r\n                          <SelectValue placeholder={formData.regionId ? \"Select an alumni group (optional)\" : \"Select a region first\"} />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {alumniGroups.map((alumniGroup) => (\r\n                            <SelectItem key={alumniGroup.id} value={alumniGroup.id.toString()}>\r\n                              {alumniGroup.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id=\"isActive\"\r\n                      checked={formData.isActive}\r\n                      onCheckedChange={(checked) => handleInputChange(\"isActive\", checked as boolean)}\r\n                    />\r\n                    <Label htmlFor=\"isActive\" className=\"text-sm font-medium\">\r\n                      Event is active\r\n                    </Label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex gap-3 pt-6 border-t\">\r\n                  <Button \r\n                    type=\"button\" \r\n                    variant=\"outline\" \r\n                    className=\"flex-1 h-11\" \r\n                    onClick={() => setOpen(false)}\r\n                    disabled={isLoading}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button \r\n                    type=\"submit\" \r\n                    className=\"flex-1 h-11\" \r\n                    disabled={isLoading || success}\r\n                  >\r\n                    {isLoading ? (\r\n                      \"Creating...\"\r\n                    ) : success ? (\r\n                      \"✅ Created Successfully!\"\r\n                    ) : (\r\n                      <>\r\n                        <Plus className=\"mr-2 h-4 w-4\" />\r\n                        Add Event\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </SheetContent>\r\n    </Sheet>\r\n  )\r\n}\r\n","\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Button } from \"@/components/ui/ui copy/button\"\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetDescription,\r\n  SheetHeader,\r\n  SheetTitle,\r\n} from \"@/components/ui/ui copy/sheet\"\r\nimport { Trash2, AlertTriangle } from \"lucide-react\"\r\n\r\ninterface DeleteEventModalProps {\r\n  isOpen: boolean\r\n  onClose: () => void\r\n  onConfirm: () => void\r\n  eventName: string\r\n  isLoading?: boolean\r\n}\r\n\r\nexport function DeleteEventModal({ \r\n  isOpen, \r\n  onClose, \r\n  onConfirm, \r\n  eventName, \r\n  isLoading = false \r\n}: DeleteEventModalProps) {\r\n  return (\r\n    <Sheet open={isOpen} onOpenChange={onClose}>\r\n      <SheetContent side=\"top\" className=\"h-auto w-full max-w-md mx-auto\">\r\n        <div className=\"py-8\">\r\n          <SheetHeader className=\"pb-6 text-center\">\r\n            <div className=\"flex justify-center mb-4\">\r\n              <div className=\"flex h-16 w-16 items-center justify-center rounded-full bg-destructive/10\">\r\n                <AlertTriangle className=\"h-8 w-8 text-destructive\" />\r\n              </div>\r\n            </div>\r\n            <SheetTitle className=\"text-xl text-destructive\">Delete Event</SheetTitle>\r\n            <SheetDescription className=\"text-base\">\r\n              Are you sure you want to delete <strong>{eventName}</strong>? This action cannot be undone.\r\n            </SheetDescription>\r\n          </SheetHeader>\r\n          \r\n          <div className=\"space-y-4\">\r\n            <div className=\"p-4 bg-destructive/5 border border-destructive/20 rounded-lg\">\r\n              <div className=\"flex items-start gap-3\">\r\n                <Trash2 className=\"h-5 w-5 text-destructive mt-0.5\" />\r\n                <div className=\"text-sm text-destructive\">\r\n                  <p className=\"font-medium mb-1\">Warning:</p>\r\n                  <p>This will permanently remove the event and all associated data from the system.</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex gap-3 pt-4\">\r\n              <Button \r\n                type=\"button\" \r\n                variant=\"outline\" \r\n                className=\"flex-1\" \r\n                onClick={onClose}\r\n                disabled={isLoading}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button \r\n                type=\"button\" \r\n                variant=\"destructive\" \r\n                className=\"flex-1\" \r\n                onClick={onConfirm}\r\n                disabled={isLoading}\r\n              >\r\n                {isLoading ? (\r\n                  \"Deleting...\"\r\n                ) : (\r\n                  <>\r\n                    <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                    Delete Event\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </SheetContent>\r\n    </Sheet>\r\n  )\r\n}\r\n","\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Button } from \"@/components/ui/ui copy/button\"\r\nimport { Card, CardContent, CardHeader } from \"@/components/ui/ui copy/card\"\r\nimport { Input } from \"@/components/ui/ui copy/input\"\r\nimport { Label } from \"@/components/ui/ui copy/label\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/ui copy/select\"\r\nimport { Checkbox } from \"@/components/ui/ui copy/checkbox\"\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetDescription,\r\n  SheetHeader,\r\n  SheetTitle,\r\n  \r\n} from \"@/components/ui/ui copy/sheet\"\r\nimport { Edit, Calendar, MapPin, Building2, Users, GraduationCap, Activity } from \"lucide-react\"\r\nimport { useUserScope } from \"@/hooks/use-user-scope\"\r\n\r\ninterface Region {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\ninterface University {\r\n  id: number;\r\n  name: string;\r\n  regionId: number;\r\n}\r\n\r\ninterface SmallGroup {\r\n  id: number;\r\n  name: string;\r\n  universityId: number;\r\n  regionId: number;\r\n}\r\n\r\ninterface AlumniGroup {\r\n  id: number;\r\n  name: string;\r\n  regionId: number;\r\n}\r\n\r\ninterface Event {\r\n  id: number;\r\n  name: string;\r\n  type: string;\r\n  regionId: number;\r\n  universityId: number | null;\r\n  smallGroupId: number | null;\r\n  alumniGroupId: number | null;\r\n  isActive: boolean;\r\n  region: { name: string };\r\n  university: { name: string } | null;\r\n  smallGroup: { name: string } | null;\r\n  alumniGroup: { name: string } | null;\r\n}\r\n\r\ninterface EditEventModalProps {\r\n  event: Event | null\r\n  onEventUpdated?: () => void\r\n  isOpen: boolean\r\n  onClose: () => void\r\n}\r\n\r\nexport function EditEventModal({ event, onEventUpdated, isOpen, onClose }: EditEventModalProps) {\r\n  const [isLoading, setIsLoading] = React.useState(false)\r\n  const [errors, setErrors] = React.useState<Record<string, string>>({})\r\n  const [success, setSuccess] = React.useState(false)\r\n  \r\n  // Get user scope and visibility rules\r\n  const { userScope, loading: scopeLoading, getVisibleFields, getDefaultValues } = useUserScope()\r\n  const visibleFields = getVisibleFields()\r\n  \r\n  // Memoize default values to prevent infinite re-renders\r\n  const _defaultValues = React.useMemo(() => getDefaultValues(), [userScope])\r\n  \r\n  const [regions, setRegions] = React.useState<Region[]>([])\r\n  const [universities, setUniversities] = React.useState<University[]>([])\r\n  const [smallGroups, setSmallGroups] = React.useState<SmallGroup[]>([])\r\n  const [alumniGroups, setAlumniGroups] = React.useState<AlumniGroup[]>([])\r\n  const [formData, setFormData] = React.useState({\r\n    name: \"\",\r\n    type: \"\",\r\n    regionId: \"\",\r\n    universityId: \"\",\r\n    smallGroupId: \"\",\r\n    alumniGroupId: \"\",\r\n    isActive: true,\r\n  })\r\n\r\n  // Fetch regions when modal opens (only if region field is visible)\r\n  React.useEffect(() => {\r\n    if (isOpen && visibleFields.region) {\r\n      fetchRegions()\r\n    }\r\n  }, [isOpen, visibleFields.region])\r\n\r\n  // Fetch universities when region changes (only if university field is visible)\r\n  React.useEffect(() => {\r\n    if (formData.regionId && visibleFields.university) {\r\n      fetchUniversities(Number(formData.regionId))\r\n    } else {\r\n      setUniversities([])\r\n      setFormData(prev => ({ ...prev, universityId: \"\" }))\r\n    }\r\n  }, [formData.regionId, visibleFields.university])\r\n\r\n  // Fetch alumni groups when region changes (only if alumni group field is visible)\r\n  React.useEffect(() => {\r\n    if (formData.regionId && visibleFields.alumniGroup) {\r\n      fetchAlumniGroups(Number(formData.regionId))\r\n    } else {\r\n      setAlumniGroups([])\r\n      setFormData(prev => ({ ...prev, alumniGroupId: \"\" }))\r\n    }\r\n  }, [formData.regionId, visibleFields.alumniGroup])\r\n\r\n  // Fetch small groups when university changes (only if small group field is visible)\r\n  React.useEffect(() => {\r\n    if (visibleFields.smallGroup) {\r\n      // For university-level users, use their university ID\r\n      // For region-level users, use the selected university ID\r\n      const universityId = userScope?.scope === 'university' \r\n        ? userScope.universityId \r\n        : formData.universityId;\r\n      \r\n      if (universityId) {\r\n        fetchSmallGroups(Number(universityId))\r\n      } else {\r\n        setSmallGroups([])\r\n        setFormData(prev => ({ ...prev, smallGroupId: \"\" }))\r\n      }\r\n    }\r\n  }, [formData.universityId, visibleFields.smallGroup, userScope])\r\n\r\n  // Populate form data when event changes\r\n  React.useEffect(() => {\r\n    if (event) {\r\n      setFormData({\r\n        name: event.name || \"\",\r\n        type: event.type || \"\",\r\n        regionId: event.regionId?.toString() || \"\",\r\n        universityId: event.universityId?.toString() || \"\",\r\n        smallGroupId: event.smallGroupId?.toString() || \"\",\r\n        alumniGroupId: event.alumniGroupId?.toString() || \"\",\r\n        isActive: event.isActive ?? true,\r\n      })\r\n    }\r\n  }, [event])\r\n\r\n  const fetchRegions = async () => {\r\n    try {\r\n      const response = await fetch('/api/regions')\r\n      const data = await response.json()\r\n      setRegions(data)\r\n    } catch (error) {\r\n      console.error('Error fetching regions:', error)\r\n    }\r\n  }\r\n\r\n  const fetchUniversities = async (regionId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/universities?regionId=${regionId}`)\r\n      const data = await response.json()\r\n      setUniversities(data)\r\n    } catch (error) {\r\n      console.error('Error fetching universities:', error)\r\n    }\r\n  }\r\n\r\n  const fetchSmallGroups = async (universityId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/small-groups?universityId=${universityId}`)\r\n      const data = await response.json()\r\n      setSmallGroups(data)\r\n    } catch (error) {\r\n      console.error('Error fetching small groups:', error)\r\n    }\r\n  }\r\n\r\n  const fetchAlumniGroups = async (regionId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/alumni-small-groups?regionId=${regionId}`)\r\n      const data = await response.json()\r\n      setAlumniGroups(data)\r\n    } catch (error) {\r\n      console.error('Error fetching alumni groups:', error)\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (field: string, value: string | boolean) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }))\r\n    \r\n    // Clear error for this field when user starts typing\r\n    if (errors[field]) {\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        [field]: \"\"\r\n      }))\r\n    }\r\n    \r\n    // Clear success state when user starts typing\r\n    if (success) {\r\n      setSuccess(false)\r\n    }\r\n  }\r\n\r\n  const validateForm = (): boolean => {\r\n    const newErrors: Record<string, string> = {}\r\n    \r\n    if (!formData.name.trim()) {\r\n      newErrors.name = \"Event name is required\"\r\n    }\r\n    \r\n    if (!formData.type.trim()) {\r\n      newErrors.type = \"Event type is required\"\r\n    }\r\n    \r\n    // Only validate region if the field is visible\r\n    if (visibleFields.region && !formData.regionId) {\r\n      newErrors.regionId = \"Region is required\"\r\n    }\r\n    \r\n    setErrors(newErrors)\r\n    return Object.keys(newErrors).length === 0\r\n  }\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    \r\n    if (!event) return\r\n    \r\n    if (!validateForm()) {\r\n      return\r\n    }\r\n\r\n    setIsLoading(true)\r\n    \r\n    try {\r\n      console.log('Updating event data:', formData)\r\n      \r\n      const response = await fetch(`/api/events?id=${event.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          name: formData.name,\r\n          type: formData.type,\r\n          regionId: formData.regionId ? Number(formData.regionId) : null,\r\n          universityId: formData.universityId ? Number(formData.universityId) : null,\r\n          smallGroupId: formData.smallGroupId ? Number(formData.smallGroupId) : null,\r\n          alumniGroupId: formData.alumniGroupId ? Number(formData.alumniGroupId) : null,\r\n          isActive: formData.isActive\r\n        })\r\n      })\r\n      const data = await response.json()\r\n      \r\n      console.log('API response:', { status: response.status, data })\r\n      \r\n      if (response.ok) {\r\n        // Show success message\r\n        setSuccess(true)\r\n        setErrors({})\r\n        \r\n        // Call the callback to refresh the events list\r\n        if (onEventUpdated) {\r\n          onEventUpdated()\r\n        }\r\n        \r\n        // Close modal after a short delay\r\n        setTimeout(() => {\r\n          onClose()\r\n          setSuccess(false)\r\n        }, 1500)\r\n      } else {\r\n        // Handle API errors\r\n        console.error('API Error:', data)\r\n        setErrors({ general: data.error || \"Failed to update event\" })\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating event:\", error)\r\n      setErrors({ general: \"An unexpected error occurred\" })\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  if (!event) return null\r\n\r\n  return (\r\n    <Sheet open={isOpen} onOpenChange={onClose}>\r\n      <SheetContent side=\"top\" className=\"h-full w-full max-w-none overflow-y-auto\">\r\n        <div className=\"container mx-auto max-w-2xl py-8\">\r\n          <SheetHeader className=\"pb-8 text-center\">\r\n            <SheetTitle className=\"flex items-center justify-center gap-3 text-2xl\">\r\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-lg bg-primary/10\">\r\n                <Edit className=\"h-6 w-6 text-primary\" />\r\n              </div>\r\n              Edit Event\r\n            </SheetTitle>\r\n            <SheetDescription className=\"text-lg text-muted-foreground\">\r\n              Update event information for {event.name}.\r\n            </SheetDescription>\r\n          </SheetHeader>\r\n          \r\n          <Card className=\"shadow-lg\">\r\n            <CardHeader className=\"pb-6\">\r\n              <div className=\"text-center\">\r\n                <h3 className=\"text-lg font-semibold\">Event Information</h3>\r\n                <p className=\"text-sm text-muted-foreground\">Update the details below for this event</p>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {scopeLoading ? (\r\n                <div className=\"flex items-center justify-center py-8\">\r\n                  <div className=\"text-sm text-muted-foreground\">Loading user scope...</div>\r\n                </div>\r\n              ) : (\r\n                <form onSubmit={handleSubmit} className=\"flex flex-col gap-6\">\r\n                  {errors.general && (\r\n                    <div className=\"p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md\">\r\n                      {errors.general}\r\n                    </div>\r\n                  )}\r\n\r\n                  {/* Show scope information for non-superadmin users */}\r\n                  {userScope && userScope.scope !== 'superadmin' && (\r\n                    <div className=\"p-3 text-sm bg-blue-50 border border-blue-200 rounded-md\">\r\n                      <div className=\"font-medium text-blue-800\">Current Scope: {userScope.scope}</div>\r\n                      {userScope.region && (\r\n                        <div className=\"text-blue-700\">Region: {userScope.region.name}</div>\r\n                      )}\r\n                      {userScope.university && (\r\n                        <div className=\"text-blue-700\">University: {userScope.university.name}</div>\r\n                      )}\r\n                      {userScope.smallGroup && (\r\n                        <div className=\"text-blue-700\">Small Group: {userScope.smallGroup.name}</div>\r\n                      )}\r\n                      {userScope.alumniGroup && (\r\n                        <div className=\"text-blue-700\">Alumni Group: {userScope.alumniGroup.name}</div>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n\r\n                {/* Event Information */}\r\n                <div className=\"space-y-4\">\r\n                  <h4 className=\"text-md font-semibold text-foreground border-b pb-2\">Event Details</h4>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"name\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                      <Calendar className=\"h-4 w-4\" />\r\n                      Event Name *\r\n                    </Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      placeholder=\"Enter event name\"\r\n                      className=\"h-11\"\r\n                      value={formData.name}\r\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\r\n                      required\r\n                    />\r\n                    {errors.name && <p className=\"text-sm text-red-600\">{errors.name}</p>}\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"type\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                      <Activity className=\"h-4 w-4\" />\r\n                      Event Type *\r\n                    </Label>\r\n                    <Select\r\n                      value={formData.type}\r\n                      onValueChange={(value) => handleInputChange(\"type\", value)}\r\n                    >\r\n                      <SelectTrigger className=\"h-11\">\r\n                        <SelectValue placeholder=\"Select event type\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"bible_study\">Bible Study</SelectItem>\r\n                        <SelectItem value=\"discipleship\">Discipleship</SelectItem>\r\n                        <SelectItem value=\"evangelism\">Evangelism</SelectItem>\r\n                        <SelectItem value=\"cell_meeting\">Cell Meeting</SelectItem>\r\n                        <SelectItem value=\"alumni_meeting\">Alumni Meeting</SelectItem>\r\n                        <SelectItem value=\"other\">Other</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                    {errors.type && <p className=\"text-sm text-red-600\">{errors.type}</p>}\r\n                  </div>\r\n\r\n                  {visibleFields.region && (\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"regionId\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <MapPin className=\"h-4 w-4\" />\r\n                        Region *\r\n                      </Label>\r\n                      <Select\r\n                        value={formData.regionId}\r\n                        onValueChange={(value) => handleInputChange(\"regionId\", value)}\r\n                      >\r\n                        <SelectTrigger className=\"h-11\">\r\n                          <SelectValue placeholder=\"Select a region\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {regions.map((region) => (\r\n                            <SelectItem key={region.id} value={region.id.toString()}>\r\n                              {region.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                      {errors.regionId && <p className=\"text-sm text-red-600\">{errors.regionId}</p>}\r\n                    </div>\r\n                  )}\r\n\r\n                  {visibleFields.university && (\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"universityId\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Building2 className=\"h-4 w-4\" />\r\n                        University (Optional)\r\n                      </Label>\r\n                      <Select\r\n                        value={formData.universityId}\r\n                        onValueChange={(value) => handleInputChange(\"universityId\", value)}\r\n                        disabled={!formData.regionId}\r\n                      >\r\n                        <SelectTrigger className=\"h-11\">\r\n                          <SelectValue placeholder={formData.regionId ? \"Select a university (optional)\" : \"Select a region first\"} />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {universities.map((university) => (\r\n                            <SelectItem key={university.id} value={university.id.toString()}>\r\n                              {university.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  )}\r\n\r\n                  {visibleFields.smallGroup && (\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"smallGroupId\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <Users className=\"h-4 w-4\" />\r\n                        Small Group (Optional)\r\n                      </Label>\r\n                      <Select\r\n                        value={formData.smallGroupId}\r\n                        onValueChange={(value) => handleInputChange(\"smallGroupId\", value)}\r\n                        disabled={userScope?.scope !== 'university' && !formData.universityId}\r\n                      >\r\n                        <SelectTrigger className=\"h-11\">\r\n                          <SelectValue placeholder={\r\n                            userScope?.scope === 'university' \r\n                              ? \"Select a small group (optional)\" \r\n                              : formData.universityId \r\n                                ? \"Select a small group (optional)\" \r\n                                : \"Select a university first\"\r\n                          } />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {smallGroups.map((smallGroup) => (\r\n                            <SelectItem key={smallGroup.id} value={smallGroup.id.toString()}>\r\n                              {smallGroup.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  )}\r\n\r\n                  {visibleFields.alumniGroup && (\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"alumniGroupId\" className=\"text-sm font-medium flex items-center gap-2\">\r\n                        <GraduationCap className=\"h-4 w-4\" />\r\n                        Alumni Group (Optional)\r\n                      </Label>\r\n                      <Select\r\n                        value={formData.alumniGroupId}\r\n                        onValueChange={(value) => handleInputChange(\"alumniGroupId\", value)}\r\n                        disabled={!formData.regionId}\r\n                      >\r\n                        <SelectTrigger className=\"h-11\">\r\n                          <SelectValue placeholder={formData.regionId ? \"Select an alumni group (optional)\" : \"Select a region first\"} />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {alumniGroups.map((alumniGroup) => (\r\n                            <SelectItem key={alumniGroup.id} value={alumniGroup.id.toString()}>\r\n                              {alumniGroup.name}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id=\"isActive\"\r\n                      checked={formData.isActive}\r\n                      onCheckedChange={(checked) => handleInputChange(\"isActive\", checked as boolean)}\r\n                    />\r\n                    <Label htmlFor=\"isActive\" className=\"text-sm font-medium\">\r\n                      Event is active\r\n                    </Label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex gap-3 pt-6 border-t\">\r\n                  <Button \r\n                    type=\"button\" \r\n                    variant=\"outline\" \r\n                    className=\"flex-1 h-11\" \r\n                    onClick={onClose}\r\n                    disabled={isLoading}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button \r\n                    type=\"submit\" \r\n                    className=\"flex-1 h-11\" \r\n                    disabled={isLoading || success}\r\n                  >\r\n                    {isLoading ? (\r\n                      \"Updating...\"\r\n                    ) : success ? (\r\n                      \"✅ Updated Successfully!\"\r\n                    ) : (\r\n                      <>\r\n                        <Edit className=\"mr-2 h-4 w-4\" />\r\n                        Update Event\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </SheetContent>\r\n    </Sheet>\r\n  )\r\n}\r\n"],"names":[],"mappings":"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"}