{"version":3,"sources":["turbopack:///[project]/app/links/reports/membership/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useState, useEffect, useMemo, useRef } from 'react';\r\nimport { useSession } from 'next-auth/react';\r\nimport { useRouter } from 'next/navigation';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport { \r\n  BarChart, \r\n  Bar, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip, \r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  Area,\r\n  AreaChart\r\n} from 'recharts';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { SuperAdminScopeSelector } from '@/components/super-admin-scope-selector';\r\nimport { AppSidebar } from '@/components/app-sidebar';\r\nimport { LogoutButton } from '@/components/logout-button';\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from '@/components/ui/breadcrumb';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport {\r\n  SidebarInset,\r\n  SidebarProvider,\r\n  SidebarTrigger,\r\n} from '@/components/ui/sidebar';\r\n\r\n// Icons\r\nconst UsersIcon = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\" {...props}>\r\n    <path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n    <circle cx=\"9\" cy=\"7\" r=\"4\" stroke=\"currentColor\" strokeWidth=\"2\"/>\r\n    <path d=\"M23 21v-2a4 4 0 0 0-3-3.87\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n    <path d=\"M16 3.13a4 4 0 0 1 0 7.75\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n  </svg>\r\n);\r\n\r\nconst TrendingUpIcon = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\" {...props}>\r\n    <polyline points=\"23,6 13.5,15.5 8.5,10.5 1,18\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n    <polyline points=\"17,6 23,6 23,12\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n  </svg>\r\n);\r\n\r\nconst GraduationCapIcon = (props: React.SVGProps<SVGSVGElement>) => (\r\n  <svg width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\" {...props}>\r\n    <path d=\"M22 10v6M2 10l10-5 10 5-10 5z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n    <path d=\"M6 12v5c3 3 9 3 12 0v-5\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n  </svg>\r\n);\r\n\r\nexport default function MembershipReportsPage() {\r\n  const { data: session, status } = useSession();\r\n  const router = useRouter();\r\n  const [dateRange, setDateRange] = useState('6months');\r\n  const [selectedRegion, setSelectedRegion] = useState('all');\r\n  const [selectedUniversity, setSelectedUniversity] = useState('all');\r\n  const [selectedSmallGroup, setSelectedSmallGroup] = useState('all');\r\n  const [selectedAlumniGroup, setSelectedAlumniGroup] = useState('all');\r\n  const [dateFrom, setDateFrom] = useState('');\r\n  const [dateTo, setDateTo] = useState('');\r\n  \r\n  // Member form field filters\r\n  const [memberType, setMemberType] = useState('all');\r\n  const [memberStatus, setMemberStatus] = useState('all');\r\n  const [gender, setGender] = useState('all');\r\n  const [ageFrom, setAgeFrom] = useState('all');\r\n  const [ageTo, setAgeTo] = useState('all');\r\n  const [profession, setProfession] = useState('');\r\n  const [faculty, setFaculty] = useState('');\r\n  const [placeOfBirthProvince, setPlaceOfBirthProvince] = useState('');\r\n  const [placeOfBirthDistrict, setPlaceOfBirthDistrict] = useState('');\r\n  const [graduationYear, setGraduationYear] = useState('all');\r\n  \r\n  const [isSuperAdmin, setIsSuperAdmin] = useState(false);\r\n  const [isClient, setIsClient] = useState(false);\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [showFilters, setShowFilters] = useState(true);\r\n  const [showExportOptions, setShowExportOptions] = useState(false);\r\n  const [includeMemberDetails, setIncludeMemberDetails] = useState(false);\r\n  const reportRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Cascading dropdown data\r\n  const [regions, setRegions] = useState<Array<{id: number; name: string}>>([]);\r\n  const [universities, setUniversities] = useState<Array<{id: number; name: string; regionId: number}>>([]);\r\n  const [smallGroups, setSmallGroups] = useState<Array<{id: number; name: string; regionId: number; universityId: number}>>([]);\r\n  const [alumniGroups, setAlumniGroups] = useState<Array<{id: number; name: string; regionId: number}>>([]);\r\n\r\n  // Authentication check\r\n  useEffect(() => {\r\n    if (status === \"unauthenticated\") {\r\n      router.push('/');\r\n    }\r\n  }, [status, router]);\r\n\r\n  // Mock data generators\r\n  const _generateMembershipGrowthData = () => {\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const currentMonth = new Date().getMonth();\r\n    \r\n    return months.slice(0, currentMonth + 1).map((month, index) => {\r\n      const newMembers = 20 + (index * 5) + (index % 3) * 10;\r\n      const graduatedMembers = 5 + (index * 2) + (index % 2) * 3;\r\n      const inactiveMembers = 2 + (index % 4);\r\n      const transferredIn = 3 + (index % 2);\r\n      const transferredOut = 1 + (index % 3);\r\n      const netGrowth = newMembers + transferredIn - graduatedMembers - inactiveMembers - transferredOut;\r\n      const totalMembers = 500 + (index * 35) + (index % 3) * 20;\r\n      \r\n      return {\r\n        month,\r\n        newMembers,\r\n        graduatedMembers,\r\n        inactiveMembers,\r\n        transferredIn,\r\n        transferredOut,\r\n        netGrowth,\r\n        totalMembers,\r\n        growthRate: index > 0 ? ((netGrowth / (totalMembers - netGrowth)) * 100) : 0\r\n      };\r\n    });\r\n  };\r\n\r\n  const _generateMemberTypeData = () => [\r\n    { name: 'Students', value: 65, color: '#3B82F6', count: 1250 },\r\n    { name: 'Graduates', value: 20, color: '#10B981', count: 385 },\r\n    { name: 'Alumni', value: 10, color: '#F59E0B', count: 192 },\r\n    { name: 'Staff', value: 3, color: '#8B5CF6', count: 58 },\r\n    { name: 'Volunteers', value: 2, color: '#EF4444', count: 38 }\r\n  ];\r\n\r\n  const _generateRegionalData = () => [\r\n    { region: 'North', members: 450, growth: 12, universities: 8 },\r\n    { region: 'South', members: 380, growth: 8, universities: 6 },\r\n    { region: 'East', members: 520, growth: 15, universities: 10 },\r\n    { region: 'West', members: 340, growth: 5, universities: 5 },\r\n    { region: 'Central', members: 290, growth: 3, universities: 4 }\r\n  ];\r\n\r\n  const _generateGenderData = () => [\r\n    { name: 'Male', value: 55, color: '#3B82F6', count: 1056 },\r\n    { name: 'Female', value: 45, color: '#EC4899', count: 864 }\r\n  ];\r\n\r\n  const _generateMemberFlowData = () => {\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const currentMonth = new Date().getMonth();\r\n    \r\n    return months.slice(0, currentMonth + 1).map((month, index) => ({\r\n      month,\r\n      increase: 25 + (index * 3) + (index % 2) * 8,\r\n      decrease: 8 + (index * 1) + (index % 3) * 2,\r\n      netChange: (25 + (index * 3) + (index % 2) * 8) - (8 + (index * 1) + (index % 3) * 2),\r\n      cumulativeGrowth: 500 + (index * 20) + (index % 4) * 15\r\n    }));\r\n  };\r\n\r\n  // State for data\r\n  const [analyticsData, setAnalyticsData] = useState<{\r\n    totalMembers: number;\r\n    activeMembers: number;\r\n    memberTypeDistribution: Array<{name: string; value: number; color: string}>;\r\n    genderDistribution: Array<{name: string; value: number; color: string}>;\r\n  } | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Fetch analytics data\r\n  const fetchAnalyticsData = async (showLoading = true) => {\r\n    try {\r\n      if (showLoading) {\r\n        setLoading(true);\r\n      }\r\n      setError(null);\r\n      \r\n      const params = new URLSearchParams();\r\n      if (selectedRegion && selectedRegion !== 'all') params.append('regionId', selectedRegion);\r\n      if (selectedUniversity && selectedUniversity !== 'all') params.append('universityId', selectedUniversity);\r\n      if (selectedSmallGroup && selectedSmallGroup !== 'all') params.append('smallGroupId', selectedSmallGroup);\r\n      if (selectedAlumniGroup && selectedAlumniGroup !== 'all') params.append('alumniGroupId', selectedAlumniGroup);\r\n      if (dateFrom) params.append('dateFrom', dateFrom);\r\n      if (dateTo) params.append('dateTo', dateTo);\r\n      if (memberType && memberType !== 'all') params.append('memberType', memberType);\r\n      if (memberStatus && memberStatus !== 'all') params.append('memberStatus', memberStatus);\r\n      if (gender && gender !== 'all') params.append('gender', gender);\r\n      if (ageFrom && ageFrom !== 'all') params.append('ageFrom', ageFrom);\r\n      if (ageTo && ageTo !== 'all') params.append('ageTo', ageTo);\r\n      if (profession && profession !== 'all') params.append('profession', profession);\r\n      if (faculty && faculty !== 'all') params.append('faculty', faculty);\r\n      if (placeOfBirthProvince && placeOfBirthProvince !== 'all') params.append('placeOfBirthProvince', placeOfBirthProvince);\r\n      if (placeOfBirthDistrict && placeOfBirthDistrict !== 'all') params.append('placeOfBirthDistrict', placeOfBirthDistrict);\r\n      if (graduationYear && graduationYear !== 'all') params.append('graduationYear', graduationYear);\r\n\r\n      const response = await fetch(`/api/members/analytics?${params.toString()}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch analytics data');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      setAnalyticsData(data);\r\n    } catch (err) {\r\n      console.error('Error fetching analytics:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch analytics data');\r\n    } finally {\r\n      if (showLoading) {\r\n        setLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Initialize data on client side\r\n  useEffect(() => {\r\n    setIsClient(true);\r\n    fetchRegions();\r\n    fetchAnalyticsData();\r\n  }, []);\r\n\r\n  // Refetch analytics when filters change (without loading state)\r\n  useEffect(() => {\r\n    if (isClient) {\r\n      fetchAnalyticsData(false);\r\n    }\r\n  }, [selectedRegion, selectedUniversity, selectedSmallGroup, selectedAlumniGroup, dateFrom, dateTo, memberType, memberStatus, gender, ageFrom, ageTo, profession, faculty, placeOfBirthProvince, placeOfBirthDistrict, graduationYear]);\r\n\r\n  // Fetch regions on component mount\r\n  const fetchRegions = async () => {\r\n    try {\r\n      const response = await fetch('/api/regions');\r\n      const data = await response.json();\r\n      setRegions(data);\r\n    } catch (error) {\r\n      console.error('Error fetching regions:', error);\r\n    }\r\n  };\r\n\r\n  // Fetch universities when region changes\r\n  useEffect(() => {\r\n    if (selectedRegion && selectedRegion !== 'all') {\r\n      fetchUniversities(Number(selectedRegion));\r\n      fetchAlumniGroups(Number(selectedRegion));\r\n    } else {\r\n      setUniversities([]);\r\n      setAlumniGroups([]);\r\n      setSelectedUniversity('');\r\n      setSelectedAlumniGroup('');\r\n    }\r\n  }, [selectedRegion]);\r\n\r\n  // Fetch small groups when university changes\r\n  useEffect(() => {\r\n    if (selectedUniversity && selectedUniversity !== 'all') {\r\n      fetchSmallGroups(Number(selectedUniversity));\r\n    } else {\r\n      setSmallGroups([]);\r\n      setSelectedSmallGroup('');\r\n    }\r\n  }, [selectedUniversity]);\r\n\r\n  const fetchUniversities = async (regionId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/universities?regionId=${regionId}`);\r\n      const data = await response.json();\r\n      setUniversities(data);\r\n    } catch (error) {\r\n      console.error('Error fetching universities:', error);\r\n    }\r\n  };\r\n\r\n  const fetchSmallGroups = async (universityId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/small-groups?universityId=${universityId}`);\r\n      const data = await response.json();\r\n      setSmallGroups(data);\r\n    } catch (error) {\r\n      console.error('Error fetching small groups:', error);\r\n    }\r\n  };\r\n\r\n  const fetchAlumniGroups = async (regionId: number) => {\r\n    try {\r\n      const response = await fetch(`/api/alumni-small-groups?regionId=${regionId}`);\r\n      const data = await response.json();\r\n      setAlumniGroups(data);\r\n    } catch (error) {\r\n      console.error('Error fetching alumni groups:', error);\r\n    }\r\n  };\r\n\r\n  // Check if user is super admin\r\n  useEffect(() => {\r\n    fetch(\"/api/members/current-user-scope\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.scope) {\r\n          setIsSuperAdmin(data.scope.scope === 'superadmin');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.error(\"Failed to fetch user scope:\", err);\r\n      });\r\n  }, []);\r\n\r\n  // Close export options when clicking outside\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (showExportOptions) {\r\n        const target = event.target as Element;\r\n        if (!target.closest('.export-options-dropdown')) {\r\n          setShowExportOptions(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [showExportOptions]);\r\n\r\n  // Calculate key metrics from real data\r\n  const keyMetrics = useMemo(() => {\r\n    if (!analyticsData) {\r\n      return {\r\n        totalMembers: 0,\r\n        newMembersThisMonth: 0,\r\n        graduatedMembersThisMonth: 0,\r\n        netGrowth: 0,\r\n        memberIncrease: 0,\r\n        memberDecrease: 0,\r\n        netChange: 0,\r\n        growthRate: 0,\r\n        retentionRate: 0\r\n      };\r\n    }\r\n\r\n    const { keyMetrics: metrics, monthlyGrowth } = analyticsData;\r\n    const latest = monthlyGrowth[monthlyGrowth.length - 1];\r\n    const previous = monthlyGrowth[monthlyGrowth.length - 2];\r\n    \r\n    return {\r\n      totalMembers: metrics.totalMembers,\r\n      newMembersThisMonth: metrics.newMembersThisMonth,\r\n      graduatedMembersThisMonth: metrics.graduatedMembersThisMonth,\r\n      netGrowth: metrics.netGrowth,\r\n      memberIncrease: metrics.newMembersThisMonth,\r\n      memberDecrease: metrics.graduatedMembersThisMonth,\r\n      netChange: metrics.netGrowth,\r\n      growthRate: previous ? ((latest?.totalMembers - previous.totalMembers) / previous.totalMembers * 100) : 0,\r\n      retentionRate: metrics.retentionRate\r\n    };\r\n  }, [analyticsData]);\r\n\r\n  const dateRangeOptions = [\r\n    { value: '3months', label: 'Last 3 Months' },\r\n    { value: '6months', label: 'Last 6 Months' },\r\n    { value: '1year', label: 'Last Year' },\r\n    { value: 'all', label: 'All Time' }\r\n  ];\r\n\r\n  const memberTypeOptions = [\r\n    { value: 'all', label: 'All Types' },\r\n    { value: 'student', label: 'Students' },\r\n    { value: 'graduate', label: 'Graduates' },\r\n    { value: 'alumni', label: 'Alumni' },\r\n    { value: 'staff', label: 'Staff' },\r\n    { value: 'volunteer', label: 'Volunteers' }\r\n  ];\r\n\r\n  const memberStatusOptions = [\r\n    { value: 'all', label: 'All Status' },\r\n    { value: 'active', label: 'Active' },\r\n    { value: 'pre_graduate', label: 'Pre-Graduate' },\r\n    { value: 'graduate', label: 'Graduate' },\r\n    { value: 'alumni', label: 'Alumni' },\r\n    { value: 'inactive', label: 'Inactive' }\r\n  ];\r\n\r\n  const genderOptions = [\r\n    { value: 'all', label: 'All Genders' },\r\n    { value: 'male', label: 'Male' },\r\n    { value: 'female', label: 'Female' }\r\n  ];\r\n\r\n  const ageOptions = Array.from({ length: 50 }, (_, i) => i + 18);\r\n  const graduationYearOptions = Array.from({ length: 20 }, (_, i) => new Date().getFullYear() - i);\r\n\r\n  // Handler functions for cascading dropdowns\r\n  const handleRegionChange = (value: string) => {\r\n    setSelectedRegion(value);\r\n    setSelectedUniversity('all');\r\n    setSelectedSmallGroup('all');\r\n    setSelectedAlumniGroup('all');\r\n  };\r\n\r\n  const handleUniversityChange = (value: string) => {\r\n    setSelectedUniversity(value);\r\n    setSelectedSmallGroup('all');\r\n  };\r\n\r\n  const handleSmallGroupChange = (value: string) => {\r\n    setSelectedSmallGroup(value);\r\n  };\r\n\r\n  const handleAlumniGroupChange = (value: string) => {\r\n    setSelectedAlumniGroup(value);\r\n  };\r\n\r\n  // Fetch member details for export\r\n  const fetchMemberDetails = async () => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      if (selectedRegion && selectedRegion !== 'all') params.append('regionId', selectedRegion);\r\n      if (selectedUniversity && selectedUniversity !== 'all') params.append('universityId', selectedUniversity);\r\n      if (selectedSmallGroup && selectedSmallGroup !== 'all') params.append('smallGroupId', selectedSmallGroup);\r\n      if (selectedAlumniGroup && selectedAlumniGroup !== 'all') params.append('alumniGroupId', selectedAlumniGroup);\r\n      if (dateFrom) params.append('dateFrom', dateFrom);\r\n      if (dateTo) params.append('dateTo', dateTo);\r\n      if (memberType && memberType !== 'all') params.append('memberType', memberType);\r\n      if (memberStatus && memberStatus !== 'all') params.append('memberStatus', memberStatus);\r\n      if (gender && gender !== 'all') params.append('gender', gender);\r\n      if (ageFrom && ageFrom !== 'all') params.append('ageFrom', ageFrom);\r\n      if (ageTo && ageTo !== 'all') params.append('ageTo', ageTo);\r\n      if (profession) params.append('profession', profession);\r\n      if (faculty) params.append('faculty', faculty);\r\n      if (placeOfBirthProvince) params.append('placeOfBirthProvince', placeOfBirthProvince);\r\n      if (placeOfBirthDistrict) params.append('placeOfBirthDistrict', placeOfBirthDistrict);\r\n      if (graduationYear && graduationYear !== 'all') params.append('graduationYear', graduationYear);\r\n\r\n      const response = await fetch(`/api/members/export-details?${params.toString()}`);\r\n      if (!response.ok) throw new Error('Failed to fetch member details');\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching member details:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // PDF Export Function\r\n  const exportToPDF = async () => {\r\n    if (!reportRef.current) return;\r\n    \r\n    setIsExporting(true);\r\n    try {\r\n      // Fetch member details if requested\r\n      let memberDetails = null;\r\n      if (includeMemberDetails) {\r\n        memberDetails = await fetchMemberDetails();\r\n      }\r\n\r\n      const pdf = new jsPDF('p', 'mm', 'a4');\r\n      const pageWidth = pdf.internal.pageSize.getWidth();\r\n      const pageHeight = pdf.internal.pageSize.getHeight();\r\n      \r\n      // Add header\r\n      pdf.setFontSize(20);\r\n      pdf.setFont('helvetica', 'bold');\r\n      pdf.text('Ministry Management System', pageWidth / 2, 20, { align: 'center' });\r\n      \r\n      pdf.setFontSize(16);\r\n      pdf.setFont('helvetica', 'normal');\r\n      pdf.text('Membership Reports & Analytics', pageWidth / 2, 30, { align: 'center' });\r\n      \r\n      // Add report metadata\r\n      pdf.setFontSize(10);\r\n      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);\r\n      pdf.text(`Report Period: ${dateRangeOptions.find(opt => opt.value === dateRange)?.label || 'Custom'}`, 20, 50);\r\n      if (selectedRegion && selectedRegion !== 'all') {\r\n        const region = regions.find(r => r.id.toString() === selectedRegion);\r\n        pdf.text(`Region: ${region?.name || selectedRegion}`, 20, 55);\r\n      }\r\n      \r\n      // Add key metrics summary\r\n      pdf.setFontSize(12);\r\n      pdf.setFont('helvetica', 'bold');\r\n      pdf.text('Executive Summary', 20, 70);\r\n      \r\n      pdf.setFontSize(10);\r\n      pdf.setFont('helvetica', 'normal');\r\n      pdf.text(`Total Members: ${keyMetrics.totalMembers.toLocaleString()}`, 20, 80);\r\n      pdf.text(`New Members This Month: ${keyMetrics.newMembersThisMonth}`, 20, 85);\r\n      pdf.text(`Graduated Members: ${keyMetrics.graduatedMembersThisMonth}`, 20, 90);\r\n      pdf.text(`Net Growth: ${keyMetrics.netGrowth}`, 20, 95);\r\n      pdf.text(`Member Increase: ${keyMetrics.memberIncrease}`, 20, 100);\r\n      pdf.text(`Member Decrease: ${keyMetrics.memberDecrease}`, 20, 105);\r\n      pdf.text(`Net Change: ${keyMetrics.netChange >= 0 ? '+' : ''}${keyMetrics.netChange}`, 20, 110);\r\n      pdf.text(`Growth Rate: ${keyMetrics.growthRate > 0 ? '+' : ''}${keyMetrics.growthRate.toFixed(1)}%`, 20, 115);\r\n      pdf.text(`Retention Rate: ${keyMetrics.retentionRate}%`, 20, 120);\r\n      \r\n      // Add member details if requested\r\n      if (includeMemberDetails && memberDetails && memberDetails.members.length > 0) {\r\n        let yPosition = 140;\r\n        \r\n        // Check if we need a new page\r\n        if (yPosition > pageHeight - 50) {\r\n          pdf.addPage();\r\n          yPosition = 20;\r\n        }\r\n        \r\n        // Add member details section\r\n        pdf.setFontSize(14);\r\n        pdf.setFont('helvetica', 'bold');\r\n        pdf.text('Member Details', 20, yPosition);\r\n        yPosition += 10;\r\n        \r\n        // Add filter summary\r\n        pdf.setFontSize(10);\r\n        pdf.setFont('helvetica', 'normal');\r\n        const appliedFilters = memberDetails.appliedFilters;\r\n        const activeFilters = Object.entries(appliedFilters)\r\n          .filter(([key, value]) => value && value !== 'all' && value !== '')\r\n          .map(([key, value]) => `${key}: ${value}`)\r\n          .join(', ');\r\n        \r\n        if (activeFilters) {\r\n          pdf.text(`Applied Filters: ${activeFilters}`, 20, yPosition);\r\n          yPosition += 8;\r\n        }\r\n        \r\n        pdf.text(`Total Members Found: ${memberDetails.totalCount}`, 20, yPosition);\r\n        yPosition += 15;\r\n        \r\n        // Add member table headers\r\n        pdf.setFontSize(8);\r\n        pdf.setFont('helvetica', 'bold');\r\n        const headers = ['Name', 'Email', 'Gender', 'Age', 'Type', 'Status', 'Region', 'University'];\r\n        const colWidths = [30, 35, 15, 10, 20, 20, 25, 25];\r\n        let xPosition = 20;\r\n        \r\n        // Draw table headers\r\n        headers.forEach((header, index) => {\r\n          pdf.text(header, xPosition, yPosition);\r\n          xPosition += colWidths[index];\r\n        });\r\n        yPosition += 5;\r\n        \r\n        // Draw line under headers\r\n        pdf.line(20, yPosition, 20 + colWidths.reduce((a, b) => a + b, 0), yPosition);\r\n        yPosition += 3;\r\n        \r\n        // Add member data\r\n        pdf.setFont('helvetica', 'normal');\r\n        memberDetails.members.forEach((member: { firstName: string; lastName: string; email?: string; phone?: string; region?: string; university?: string; smallGroup?: string; alumniGroup?: string; type: string; status: string; gender?: string; age?: number; profession?: string; faculty?: string; createdAt: string }, _index: number) => {\r\n          // Check if we need a new page\r\n          if (yPosition > pageHeight - 20) {\r\n            pdf.addPage();\r\n            yPosition = 20;\r\n          }\r\n          \r\n          xPosition = 20;\r\n          const memberData = [\r\n            `${member.firstName} ${member.lastName}`,\r\n            member.email || 'N/A',\r\n            member.gender || 'N/A',\r\n            member.age ? member.age.toString() : 'N/A',\r\n            member.type || 'N/A',\r\n            member.status || 'N/A',\r\n            member.region || 'N/A',\r\n            member.university || 'N/A'\r\n          ];\r\n          \r\n          memberData.forEach((data, colIndex) => {\r\n            // Truncate long text\r\n            const truncatedData = data.length > 15 ? data.substring(0, 12) + '...' : data;\r\n            pdf.text(truncatedData, xPosition, yPosition);\r\n            xPosition += colWidths[colIndex];\r\n          });\r\n          \r\n          yPosition += 5;\r\n        });\r\n      }\r\n      \r\n      // Save the PDF\r\n      const fileName = `Membership_Report_${includeMemberDetails ? 'with_details_' : ''}${new Date().toISOString().split('T')[0]}.pdf`;\r\n      pdf.save(fileName);\r\n      \r\n    } catch (error) {\r\n      console.error('Error generating PDF:', error);\r\n      alert('Error generating PDF. Please try again.');\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  };\r\n\r\n  // Show loading state\r\n  if (status === \"loading\") {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"unauthenticated\") {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-center\">\r\n          <h1 className=\"text-2xl font-bold mb-4\">Redirecting...</h1>\r\n          <p className=\"text-muted-foreground mb-4\">Please wait while we redirect you to the login page.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show loading state until client-side data is ready\r\n  if (!isClient || loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px]\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-500 dark:text-gray-400\">Loading membership data...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show error state\r\n  if (error) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-[400px]\">\r\n        <div className=\"text-center\">\r\n          <div className=\"text-red-600 mb-4\">\r\n            <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n            </svg>\r\n          </div>\r\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Error Loading Data</h3>\r\n          <p className=\"text-gray-500 dark:text-gray-400 mb-4\">{error}</p>\r\n          <button \r\n            onClick={() => fetchAnalyticsData(true)}\r\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\r\n          >\r\n            Try Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <SidebarProvider>\r\n      <AppSidebar />\r\n      <SidebarInset>\r\n        <header className=\"flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-data-[collapsible=icon]/sidebar-wrapper:h-12\">\r\n          <div className=\"flex items-center gap-2 px-4\">\r\n            <SidebarTrigger className=\"-ml-1\" />\r\n            <Separator\r\n              orientation=\"vertical\"\r\n              className=\"mr-2 data-[orientation=vertical]:h-4\"\r\n            />\r\n            <Breadcrumb>\r\n              <BreadcrumbList>\r\n                <BreadcrumbItem className=\"hidden md:block\">\r\n                  <BreadcrumbLink href=\"/dashboard\">\r\n                    Dashboard\r\n                  </BreadcrumbLink>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbSeparator className=\"hidden md:block\" />\r\n                <BreadcrumbItem>\r\n                  <BreadcrumbLink href=\"/links/reports\">\r\n                    Reports\r\n                  </BreadcrumbLink>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbSeparator />\r\n                <BreadcrumbItem>\r\n                  <BreadcrumbPage>Membership Analytics</BreadcrumbPage>\r\n                </BreadcrumbItem>\r\n              </BreadcrumbList>\r\n            </Breadcrumb>\r\n          </div>\r\n          <div className=\"ml-auto px-4\">\r\n            <LogoutButton />\r\n          </div>\r\n        </header>\r\n        <div className=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\r\n          <div className=\"space-y-6\" ref={reportRef}>\r\n\r\n      {/* Filter Toggle Button */}\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold text-white dark:text-white\">Membership Analytics</h2>\r\n          <p className=\"text-gray-600 dark:text-gray-400\">Comprehensive membership reports and insights</p>\r\n        </div>\r\n        <div className=\"flex items-center gap-4\">\r\n          <Button\r\n            onClick={() => setShowFilters(!showFilters)}\r\n            variant=\"outline\"\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            {showFilters ? (\r\n              <>\r\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n                </svg>\r\n                Hide Filters\r\n              </>\r\n            ) : (\r\n              <>\r\n                <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\" />\r\n                </svg>\r\n                Show Filters\r\n              </>\r\n            )}\r\n          </Button>\r\n          \r\n          {/* Export Options Dropdown */}\r\n          <div className=\"relative export-options-dropdown\">\r\n            <Button\r\n              onClick={() => setShowExportOptions(!showExportOptions)}\r\n              variant=\"outline\"\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n              </svg>\r\n              Export Options\r\n              <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\r\n              </svg>\r\n            </Button>\r\n            \r\n            {showExportOptions && (\r\n              <div className=\"absolute right-0 mt-2 w-64 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg z-10\">\r\n                <div className=\"p-4 space-y-4\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"includeDetails\"\r\n                      checked={includeMemberDetails}\r\n                      onChange={(e) => setIncludeMemberDetails(e.target.checked)}\r\n                      className=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\"\r\n                    />\r\n                    <label htmlFor=\"includeDetails\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\r\n                      Include Member Details\r\n                    </label>\r\n                  </div>\r\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                    Export detailed member information matching your current filters\r\n                  </p>\r\n                  <Button\r\n                    onClick={() => {\r\n                      setShowExportOptions(false);\r\n                      exportToPDF();\r\n                    }}\r\n                    disabled={isExporting}\r\n                    className=\"w-full flex items-center justify-center gap-2\"\r\n                  >\r\n                    {isExporting ? (\r\n                      <>\r\n                        <svg className=\"w-4 h-4 animate-spin\" fill=\"none\" viewBox=\"0 0 24 24\">\r\n                          <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\r\n                          <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\r\n                        </svg>\r\n                        Exporting...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n                        </svg>\r\n                        Export PDF\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Professional Filters Section */}\r\n      {showFilters && (\r\n        <div className=\"space-y-6\">\r\n        {/* Time & Date Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n              </svg>\r\n              Time & Date Range\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"dateRange\">Time Period</Label>\r\n                <Select value={dateRange} onValueChange={setDateRange}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select period\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {dateRangeOptions.map((option) => (\r\n                      <SelectItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"dateFrom\">From Date</Label>\r\n                <Input\r\n                  type=\"date\"\r\n                  value={dateFrom}\r\n                  onChange={(e) => setDateFrom(e.target.value)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Label htmlFor=\"dateTo\">To Date</Label>\r\n                <Input\r\n                  type=\"date\"\r\n                  value={dateTo}\r\n                  onChange={(e) => setDateTo(e.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Organizational Structure Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\" />\r\n              </svg>\r\n              Organizational Structure\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"region\">Region</Label>\r\n                <Select value={selectedRegion} onValueChange={handleRegionChange}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select region\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Regions</SelectItem>\r\n                    {regions.map((region) => (\r\n                      <SelectItem key={region.id} value={region.id.toString()}>\r\n                        {region.name}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"university\">University</Label>\r\n                <Select \r\n                  value={selectedUniversity} \r\n                  onValueChange={handleUniversityChange}\r\n                  disabled={!selectedRegion || selectedRegion === 'all'}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={selectedRegion && selectedRegion !== 'all' ? \"Select university\" : \"Select region first\"} />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Universities</SelectItem>\r\n                    {universities.map((university) => (\r\n                      <SelectItem key={university.id} value={university.id.toString()}>\r\n                        {university.name}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"smallGroup\">Small Group</Label>\r\n                <Select \r\n                  value={selectedSmallGroup} \r\n                  onValueChange={handleSmallGroupChange}\r\n                  disabled={!selectedUniversity || selectedUniversity === 'all'}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={selectedUniversity && selectedUniversity !== 'all' ? \"Select small group\" : \"Select university first\"} />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Small Groups</SelectItem>\r\n                    {smallGroups.map((smallGroup) => (\r\n                      <SelectItem key={smallGroup.id} value={smallGroup.id.toString()}>\r\n                        {smallGroup.name}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"alumniGroup\">Alumni Group</Label>\r\n                <Select \r\n                  value={selectedAlumniGroup} \r\n                  onValueChange={handleAlumniGroupChange}\r\n                  disabled={!selectedRegion || selectedRegion === 'all'}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={selectedRegion && selectedRegion !== 'all' ? \"Select alumni group\" : \"Select region first\"} />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Alumni Groups</SelectItem>\r\n                    {alumniGroups.map((alumniGroup) => (\r\n                      <SelectItem key={alumniGroup.id} value={alumniGroup.id.toString()}>\r\n                        {alumniGroup.name}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Member Demographics Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\r\n              </svg>\r\n              Member Demographics\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"memberType\">Member Type</Label>\r\n                <Select value={memberType} onValueChange={setMemberType}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select member type\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {memberTypeOptions.map((option) => (\r\n                      <SelectItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"memberStatus\">Status</Label>\r\n                <Select value={memberStatus} onValueChange={setMemberStatus}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select status\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {memberStatusOptions.map((option) => (\r\n                      <SelectItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"gender\">Gender</Label>\r\n                <Select value={gender} onValueChange={setGender}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select gender\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {genderOptions.map((option) => (\r\n                      <SelectItem key={option.value} value={option.value}>\r\n                        {option.label}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"graduationYear\">Graduation Year</Label>\r\n                <Select value={graduationYear} onValueChange={setGraduationYear}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Select graduation year\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">All Years</SelectItem>\r\n                    {graduationYearOptions.map((year) => (\r\n                      <SelectItem key={year} value={year.toString()}>\r\n                        {year}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Age Range & Professional Information */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2V6\" />\r\n              </svg>\r\n              Age Range & Professional Information\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"ageFrom\">Age From</Label>\r\n                <Select value={ageFrom} onValueChange={setAgeFrom}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Min age\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">Any age</SelectItem>\r\n                    {ageOptions.map((age) => (\r\n                      <SelectItem key={age} value={age.toString()}>\r\n                        {age} years\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"ageTo\">Age To</Label>\r\n                <Select value={ageTo} onValueChange={setAgeTo}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Max age\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">Any age</SelectItem>\r\n                    {ageOptions.map((age) => (\r\n                      <SelectItem key={age} value={age.toString()}>\r\n                        {age} years\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"profession\">Profession</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter profession\"\r\n                  value={profession}\r\n                  onChange={(e) => setProfession(e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"faculty\">Faculty</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter faculty\"\r\n                  value={faculty}\r\n                  onChange={(e) => setFaculty(e.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Place of Birth */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n              </svg>\r\n              Place of Birth\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"placeOfBirthProvince\">Province</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter province\"\r\n                  value={placeOfBirthProvince}\r\n                  onChange={(e) => setPlaceOfBirthProvince(e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"placeOfBirthDistrict\">District</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Enter district\"\r\n                  value={placeOfBirthDistrict}\r\n                  onChange={(e) => setPlaceOfBirthDistrict(e.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Filter Actions */}\r\n        <div className=\"flex justify-between items-center\">\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n            Use filters to generate specific reports for different audiences (CEO, President, Manager, etc.)\r\n          </div>\r\n          <Button\r\n            onClick={() => {\r\n              setDateRange('6months');\r\n              setSelectedRegion('all');\r\n              setSelectedUniversity('all');\r\n              setSelectedSmallGroup('all');\r\n              setSelectedAlumniGroup('all');\r\n              setDateFrom('');\r\n              setDateTo('');\r\n              setMemberType('all');\r\n              setMemberStatus('all');\r\n              setGender('all');\r\n              setAgeFrom('all');\r\n              setAgeTo('all');\r\n              setProfession('');\r\n              setFaculty('');\r\n              setPlaceOfBirthProvince('');\r\n              setPlaceOfBirthDistrict('');\r\n              setGraduationYear('all');\r\n            }}\r\n            variant=\"outline\"\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\r\n            </svg>\r\n            Reset All Filters\r\n          </Button>\r\n        </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Key Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{keyMetrics.totalMembers.toLocaleString()}</p>\r\n              <p className=\"text-sm text-blue-500 dark:text-blue-300\">\r\n                {keyMetrics.growthRate > 0 ? '+' : ''}{keyMetrics.growthRate.toFixed(1)}% from last period\r\n              </p>\r\n            </div>\r\n              <div className=\"p-3 bg-blue-100 dark:bg-blue-900 rounded-full\">\r\n                <UsersIcon className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\r\n              </div>\r\n            </div>\r\n            <p className=\"text-sm font-medium text-blue-700 dark:text-blue-200 mt-2\">Total Members</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{keyMetrics.newMembersThisMonth}</p>\r\n              <p className=\"text-sm text-green-500 dark:text-green-300\">New registrations</p>\r\n            </div>\r\n              <div className=\"p-3 bg-green-100 dark:bg-green-900 rounded-full\">\r\n                <TrendingUpIcon className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\r\n              </div>\r\n            </div>\r\n            <p className=\"text-sm font-medium text-green-700 dark:text-green-200 mt-2\">New Members This Month</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">{keyMetrics.graduatedMembersThisMonth}</p>\r\n              <p className=\"text-sm text-purple-500 dark:text-purple-300\">This month</p>\r\n            </div>\r\n              <div className=\"p-3 bg-purple-100 dark:bg-purple-900 rounded-full\">\r\n                <GraduationCapIcon className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\r\n              </div>\r\n            </div>\r\n            <p className=\"text-sm font-medium text-purple-700 dark:text-purple-200 mt-2\">Graduated Members</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <p className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">{keyMetrics.retentionRate}%</p>\r\n              <p className=\"text-sm text-yellow-500 dark:text-yellow-300\">Member retention</p>\r\n            </div>\r\n              <div className=\"p-3 bg-yellow-100 dark:bg-yellow-900 rounded-full\">\r\n                <TrendingUpIcon className=\"w-6 h-6 text-yellow-600 dark:text-yellow-400\" />\r\n              </div>\r\n            </div>\r\n            <p className=\"text-sm font-medium text-yellow-700 dark:text-yellow-200 mt-2\">Retention Rate</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className={`text-2xl font-bold ${keyMetrics.netChange >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>\r\n                  {keyMetrics.netChange >= 0 ? '+' : ''}{keyMetrics.netChange}\r\n                </p>\r\n                <p className=\"text-sm text-emerald-500 dark:text-emerald-300\">\r\n                  {keyMetrics.memberIncrease} new, {keyMetrics.memberDecrease} left\r\n                </p>\r\n              </div>\r\n              <div className={`p-3 rounded-full ${keyMetrics.netChange >= 0 ? 'bg-green-100 dark:bg-green-900' : 'bg-red-100 dark:bg-red-900'}`}>\r\n                {keyMetrics.netChange >= 0 ? (\r\n                  <TrendingUpIcon className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\r\n                ) : (\r\n                  <svg className=\"w-6 h-6 text-red-600 dark:text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <polyline points=\"23,18 13.5,8.5 8.5,13.5 1,6\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                    <polyline points=\"17,18 23,18 23,12\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                  </svg>\r\n                )}\r\n              </div>\r\n            </div>\r\n            <p className=\"text-sm font-medium text-emerald-700 dark:text-emerald-200 mt-2\">Net Change This Month</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Charts Row 1 - Growth Trends */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Membership Growth Trends</CardTitle>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Monthly new members, graduations, and net growth</p>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <AreaChart data={analyticsData?.monthlyGrowth || []}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"month\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Area \r\n                    type=\"monotone\" \r\n                    dataKey=\"newMembers\" \r\n                    stackId=\"1\" \r\n                    stroke=\"#10B981\" \r\n                    fill=\"#10B981\" \r\n                    fillOpacity={0.6}\r\n                    name=\"New Members\"\r\n                  />\r\n                  <Area \r\n                    type=\"monotone\" \r\n                    dataKey=\"graduatedMembers\" \r\n                    stackId=\"2\" \r\n                    stroke=\"#EF4444\" \r\n                    fill=\"#EF4444\" \r\n                    fillOpacity={0.6}\r\n                    name=\"Graduated\"\r\n                  />\r\n                  <Area \r\n                    type=\"monotone\" \r\n                    dataKey=\"netGrowth\" \r\n                    stackId=\"3\" \r\n                    stroke=\"#3B82F6\" \r\n                    fill=\"#3B82F6\" \r\n                    fillOpacity={0.6}\r\n                    name=\"Net Growth\"\r\n                  />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Member Type Distribution</CardTitle>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Breakdown of members by type and status</p>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <PieChart>\r\n                  <Pie\r\n                    data={analyticsData?.memberTypeDistribution || []}\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    labelLine={false}\r\n                    label={({ name, percent }: { name: string; percent?: number }) => `${name} ${((percent || 0) * 100).toFixed(0)}%`}\r\n                    outerRadius={80}\r\n                    fill=\"#8884d8\"\r\n                    dataKey=\"value\"\r\n                  >\r\n                    {(analyticsData?.memberTypeDistribution || []).map((entry: { name: string; value: number }, index: number) => (\r\n                      <Cell key={`cell-${index}`} fill={entry.color} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Tooltip />\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Charts Row 2 - Member Flow Analysis */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Member Increase/Decrease Trends</CardTitle>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Monthly member additions and departures with net change</p>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={analyticsData?.monthlyGrowth || []}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"month\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Bar dataKey=\"newMembers\" fill=\"#10B981\" name=\"New Members\" />\r\n                  <Bar dataKey=\"graduatedMembers\" fill=\"#EF4444\" name=\"Graduated Members\" />\r\n                  <Bar dataKey=\"netGrowth\" fill=\"#3B82F6\" name=\"Net Growth\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Cumulative Growth Trend</CardTitle>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total membership growth over time</p>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <AreaChart data={analyticsData?.monthlyGrowth || []}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"month\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Area \r\n                    type=\"monotone\" \r\n                    dataKey=\"totalMembers\" \r\n                    stroke=\"#8B5CF6\" \r\n                    fill=\"#8B5CF6\" \r\n                    fillOpacity={0.6}\r\n                    name=\"Total Members\"\r\n                  />\r\n                </AreaChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Charts Row 3 - Demographics */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Regional Distribution</CardTitle>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Member count and growth by region</p>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <BarChart data={analyticsData?.regionalDistribution || []}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"region\" />\r\n                  <YAxis />\r\n                  <Tooltip />\r\n                  <Bar dataKey=\"members\" fill=\"#8B5CF6\" name=\"Members\" />\r\n                  <Bar dataKey=\"growth\" fill=\"#F59E0B\" name=\"Growth %\" />\r\n                </BarChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Gender Distribution</CardTitle>\r\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Male vs Female member breakdown</p>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80\">\r\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                <PieChart>\r\n                  <Pie\r\n                    data={analyticsData?.genderDistribution || []}\r\n                    cx=\"50%\"\r\n                    cy=\"50%\"\r\n                    labelLine={false}\r\n                    label={({ name, percent }: { name: string; percent?: number }) => `${name} ${((percent || 0) * 100).toFixed(0)}%`}\r\n                    outerRadius={80}\r\n                    fill=\"#8884d8\"\r\n                    dataKey=\"value\"\r\n                  >\r\n                    {(analyticsData?.genderDistribution || []).map((entry: { name: string; value: number }, index: number) => (\r\n                      <Cell key={`cell-${index}`} fill={entry.color} />\r\n                    ))}\r\n                  </Pie>\r\n                  <Tooltip />\r\n                </PieChart>\r\n              </ResponsiveContainer>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n          </div>\r\n        </div>\r\n      </SidebarInset>\r\n    </SidebarProvider>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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"}