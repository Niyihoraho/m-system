{"version":3,"sources":["turbopack:///[project]/node_modules/next/dist/esm/build/templates/app-route.js","turbopack:///[project]/app/api/engagement/analytics/route.ts"],"sourcesContent":["import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/engagement/analytics/route\",\n        pathname: \"/api/engagement/analytics\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/app/api/engagement/analytics/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/engagement/analytics/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport { getUserScope, generateRLSConditions } from \"@/lib/rls\";\r\n\r\nexport async function GET(request: NextRequest) {\r\n    try {\r\n        // Get user scope for RLS\r\n        const userScope = await getUserScope();\r\n        if (!userScope) {\r\n            return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\r\n        }\r\n\r\n        const { searchParams } = new URL(request.url);\r\n        \r\n        // Get filter parameters\r\n        const regionId = searchParams.get(\"regionId\");\r\n        const universityId = searchParams.get(\"universityId\");\r\n        const smallGroupId = searchParams.get(\"smallGroupId\");\r\n        const alumniGroupId = searchParams.get(\"alumniGroupId\");\r\n        const dateFrom = searchParams.get(\"dateFrom\");\r\n        const dateTo = searchParams.get(\"dateTo\");\r\n        \r\n        // Engagement type filters\r\n        const _engagementType = searchParams.get(\"engagementType\");\r\n        const selectedEvent = searchParams.get(\"selectedEvent\");\r\n        const selectedDesignation = searchParams.get(\"selectedDesignation\");\r\n\r\n        // Build the filter object with RLS conditions\r\n        const rlsConditions = generateRLSConditions(userScope);\r\n        const where: Record<string, unknown> = { ...rlsConditions };\r\n\r\n        // Apply explicit filters if they exist (but they must be within user's scope)\r\n        if (regionId && regionId !== 'all') {\r\n            const requestedRegionId = Number(regionId);\r\n            if (rlsConditions.regionId && requestedRegionId !== rlsConditions.regionId) {\r\n                return NextResponse.json({ error: \"Access denied to requested region\" }, { status: 403 });\r\n            }\r\n            where.regionId = requestedRegionId;\r\n        }\r\n        if (universityId && universityId !== 'all') {\r\n            const requestedUniversityId = Number(universityId);\r\n            if (rlsConditions.universityId && requestedUniversityId !== rlsConditions.universityId) {\r\n                return NextResponse.json({ error: \"Access denied to requested university\" }, { status: 403 });\r\n            }\r\n            where.universityId = requestedUniversityId;\r\n        }\r\n        if (smallGroupId && smallGroupId !== 'all') {\r\n            const requestedSmallGroupId = Number(smallGroupId);\r\n            if (rlsConditions.smallGroupId && requestedSmallGroupId !== rlsConditions.smallGroupId) {\r\n                return NextResponse.json({ error: \"Access denied to requested small group\" }, { status: 403 });\r\n            }\r\n            where.smallGroupId = requestedSmallGroupId;\r\n        }\r\n        if (alumniGroupId && alumniGroupId !== 'all') {\r\n            const requestedAlumniGroupId = Number(alumniGroupId);\r\n            if (rlsConditions.alumniGroupId && requestedAlumniGroupId !== rlsConditions.alumniGroupId) {\r\n                return NextResponse.json({ error: \"Access denied to requested alumni group\" }, { status: 403 });\r\n            }\r\n            where.alumniGroupId = requestedAlumniGroupId;\r\n        }\r\n\r\n        // Apply date filters\r\n        if (dateFrom || dateTo) {\r\n            where.createdAt = {};\r\n            if (dateFrom) {\r\n                const fromDate = new Date(dateFrom);\r\n                fromDate.setHours(0, 0, 0, 0);\r\n                where.createdAt.gte = fromDate;\r\n            }\r\n            if (dateTo) {\r\n                const toDate = new Date(dateTo);\r\n                toDate.setHours(23, 59, 59, 999);\r\n                where.createdAt.lte = toDate;\r\n            }\r\n        }\r\n\r\n        // Get event attendance data\r\n        const eventAttendanceData = await getEventAttendanceData(where, selectedEvent);\r\n        \r\n        // Get designation participation data\r\n        const designationData = await getDesignationData(where, selectedDesignation);\r\n        \r\n        // Get monthly engagement trends\r\n        const monthlyTrends = await getMonthlyEngagementTrends(where, dateFrom, dateTo);\r\n        \r\n        // Get regional engagement data with hierarchical comparisons\r\n        const regionalEngagement = await getRegionalEngagementData(where, regionId, universityId);\r\n        \r\n        // Get engagement type distribution\r\n        const engagementTypeDistribution = await getEngagementTypeDistribution(where);\r\n        \r\n        // Get event engagement levels\r\n        const eventEngagementLevels = await getEventEngagementLevels(where);\r\n        \r\n        // Calculate key metrics\r\n        const keyMetrics = {\r\n            totalEngagement: eventAttendanceData.totalAttendance + designationData.totalContributions,\r\n            averageEngagementRate: calculateEngagementRate(eventAttendanceData, designationData),\r\n            eventParticipation: eventAttendanceData.totalAttendance,\r\n            designationParticipation: designationData.totalContributions,\r\n            monthlyGrowth: calculateMonthlyGrowth(monthlyTrends)\r\n        };\r\n\r\n        // Format the response\r\n        const analytics = {\r\n            keyMetrics,\r\n            engagementTrends: monthlyTrends,\r\n            engagementTypeDistribution,\r\n            regionalEngagement,\r\n            eventEngagementLevels\r\n        };\r\n\r\n        // Only add fallback data if absolutely no data exists in the database\r\n        if (keyMetrics.totalEngagement === 0 && keyMetrics.eventParticipation === 0 && keyMetrics.designationParticipation === 0) {\r\n            // Check if there's any data at all in the database\r\n            const hasAnyData = await checkForAnyEngagementData(where);\r\n            \r\n            if (!hasAnyData) {\r\n                // Only use sample data if there's truly no data in the database\r\n                analytics.keyMetrics = {\r\n                    totalEngagement: 0,\r\n                    averageEngagementRate: 0,\r\n                    eventParticipation: 0,\r\n                    designationParticipation: 0,\r\n                    monthlyGrowth: 0\r\n                };\r\n\r\n                analytics.engagementTrends = [];\r\n                analytics.engagementTypeDistribution = [\r\n                    { name: 'Events', value: 0, color: '#3B82F6', count: 0 },\r\n                    { name: 'Designations', value: 0, color: '#10B981', count: 0 }\r\n                ];\r\n                analytics.regionalEngagement = [];\r\n                analytics.eventEngagementLevels = [\r\n                    { name: 'High Engagement', value: 0, color: '#10B981', count: 0 },\r\n                    { name: 'Medium Engagement', value: 0, color: '#F59E0B', count: 0 },\r\n                    { name: 'Low Engagement', value: 0, color: '#EF4444', count: 0 }\r\n                ];\r\n            }\r\n        }\r\n\r\n        return NextResponse.json(analytics, { status: 200 });\r\n\r\n    } catch (error) {\r\n        console.error(\"Error fetching engagement analytics:\", error);\r\n        return NextResponse.json({ error: 'Failed to fetch engagement analytics' }, { status: 500 });\r\n    }\r\n}\r\n\r\n// Helper function to get event attendance data\r\nasync function getEventAttendanceData(where: Record<string, unknown>, selectedEvent?: string | null) {\r\n    try {\r\n        const eventWhere = { ...where };\r\n        \r\n        // Filter by specific event if selected\r\n        if (selectedEvent && selectedEvent !== 'all') {\r\n            eventWhere.id = Number(selectedEvent);\r\n        }\r\n\r\n        // Get permanent ministry events with attendance\r\n        const permanentEvents = await prisma.permanentministryevent.findMany({\r\n            where: eventWhere,\r\n            include: {\r\n                attendance: {\r\n                    where: {\r\n                        status: 'present'\r\n                    },\r\n                    include: {\r\n                        member: {\r\n                            select: {\r\n                                id: true,\r\n                                firstname: true,\r\n                                secondname: true,\r\n                                regionId: true,\r\n                                universityId: true,\r\n                                smallGroupId: true,\r\n                                alumniGroupId: true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Get training events with attendance\r\n        const trainingEvents = await prisma.trainings.findMany({\r\n            where: eventWhere,\r\n            include: {\r\n                attendance: {\r\n                    where: {\r\n                        status: 'present'\r\n                    },\r\n                    include: {\r\n                        member: {\r\n                            select: {\r\n                                id: true,\r\n                                firstname: true,\r\n                                secondname: true,\r\n                                regionId: true,\r\n                                universityId: true,\r\n                                smallGroupId: true,\r\n                                alumniGroupId: true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        const totalAttendance = permanentEvents.reduce((sum, event) => sum + event.attendance.length, 0) +\r\n                               trainingEvents.reduce((sum, event) => sum + event.attendance.length, 0);\r\n\r\n        return {\r\n            totalAttendance,\r\n            permanentEvents: permanentEvents.length,\r\n            trainingEvents: trainingEvents.length,\r\n            events: [...permanentEvents, ...trainingEvents]\r\n        };\r\n    } catch (error) {\r\n        console.error('Error fetching event attendance data:', error);\r\n        return {\r\n            totalAttendance: 0,\r\n            permanentEvents: 0,\r\n            trainingEvents: 0,\r\n            events: []\r\n        };\r\n    }\r\n}\r\n\r\n// Helper function to get designation participation data\r\nasync function getDesignationData(where: Record<string, unknown>, selectedDesignation?: string | null) {\r\n    try {\r\n        // Get contributions grouped by designation\r\n        const contributions = await prisma.contribution.findMany({\r\n            where: {\r\n                designationId: selectedDesignation && selectedDesignation !== 'all' ? Number(selectedDesignation) : undefined,\r\n                status: 'completed',\r\n                member: {\r\n                    ...where\r\n                }\r\n            },\r\n            include: {\r\n                contributiondesignation: true,\r\n                member: {\r\n                    select: {\r\n                        id: true,\r\n                        firstname: true,\r\n                        secondname: true,\r\n                        regionId: true,\r\n                        universityId: true,\r\n                        smallGroupId: true,\r\n                        alumniGroupId: true\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        const totalContributions = contributions.length;\r\n        const totalAmount = contributions.reduce((sum, contrib) => sum + contrib.amount, 0);\r\n\r\n        return {\r\n            totalContributions,\r\n            totalAmount,\r\n            contributions\r\n        };\r\n    } catch (error) {\r\n        console.error('Error fetching designation data:', error);\r\n        return {\r\n            totalContributions: 0,\r\n            totalAmount: 0,\r\n            contributions: []\r\n        };\r\n    }\r\n}\r\n\r\n// Helper function to get monthly engagement trends\r\nasync function getMonthlyEngagementTrends(where: Record<string, unknown>, _dateFrom?: string | null, _dateTo?: string | null) {\r\n    try {\r\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        const _currentMonth = new Date().getMonth();\r\n        const trends = [];\r\n        \r\n        for (let i = 11; i >= 0; i--) {\r\n            const monthStart = new Date();\r\n            monthStart.setMonth(monthStart.getMonth() - i);\r\n            monthStart.setDate(1);\r\n            monthStart.setHours(0, 0, 0, 0);\r\n            \r\n            const monthEnd = new Date(monthStart);\r\n            monthEnd.setMonth(monthEnd.getMonth() + 1);\r\n            monthEnd.setDate(0);\r\n            monthEnd.setHours(23, 59, 59, 999);\r\n\r\n            // Get event attendance for this month\r\n            const eventAttendance = await prisma.attendance.count({\r\n                where: {\r\n                    status: 'present',\r\n                    recordedAt: {\r\n                        gte: monthStart,\r\n                        lte: monthEnd\r\n                    },\r\n                    member: where\r\n                }\r\n            });\r\n\r\n            // Get designation participation for this month\r\n            const designationParticipation = await prisma.contribution.count({\r\n                where: {\r\n                    status: 'completed',\r\n                    createdAt: {\r\n                        gte: monthStart,\r\n                        lte: monthEnd\r\n                    },\r\n                    member: where\r\n                }\r\n            });\r\n\r\n            // Get total active members for this month\r\n            const activeMembers = await prisma.member.count({\r\n                where: {\r\n                    ...where,\r\n                    status: 'active',\r\n                    createdAt: {\r\n                        lte: monthEnd\r\n                    }\r\n                }\r\n            });\r\n\r\n            const totalEngagement = eventAttendance + designationParticipation;\r\n            const engagementRate = activeMembers > 0 ? Math.round((totalEngagement / activeMembers) * 100) : 0;\r\n\r\n            trends.push({\r\n                month: months[monthStart.getMonth()],\r\n                eventAttendance,\r\n                designationParticipation,\r\n                totalEngagement,\r\n                engagementRate,\r\n                activeMembers\r\n            });\r\n        }\r\n\r\n        return trends;\r\n    } catch (error) {\r\n        console.error('Error fetching monthly trends:', error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Helper function to get regional engagement data with hierarchical comparisons\r\nasync function getRegionalEngagementData(where: Record<string, unknown>, regionId?: string | null, universityId?: string | null) {\r\n    try {\r\n        const comparisonData = [];\r\n\r\n        // If a specific region is selected, show university comparison within that region\r\n        if (regionId && regionId !== 'all') {\r\n            const universities = await prisma.university.findMany({\r\n                where: {\r\n                    regionId: Number(regionId)\r\n                },\r\n                include: {\r\n                    member: {\r\n                        where: {\r\n                            ...where,\r\n                            regionId: Number(regionId)\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            for (const university of universities) {\r\n                // Get event engagement for this university\r\n                const eventEngagement = await prisma.attendance.count({\r\n                    where: {\r\n                        status: 'present',\r\n                        member: {\r\n                            ...where,\r\n                            regionId: Number(regionId),\r\n                            universityId: university.id\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Get designation engagement for this university\r\n                const designationEngagement = await prisma.contribution.count({\r\n                    where: {\r\n                        status: 'completed',\r\n                        member: {\r\n                            ...where,\r\n                            regionId: Number(regionId),\r\n                            universityId: university.id\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const totalEngagement = eventEngagement + designationEngagement;\r\n                const engagementRate = university.member.length > 0 ? Math.round((totalEngagement / university.member.length) * 100) : 0;\r\n\r\n                comparisonData.push({\r\n                    region: university.name, // Using university name as the label\r\n                    totalEngagement,\r\n                    eventEngagement,\r\n                    designationEngagement,\r\n                    engagementRate\r\n                });\r\n            }\r\n        }\r\n        // If a specific university is selected, show small group comparison within that university\r\n        else if (universityId && universityId !== 'all') {\r\n            const smallGroups = await prisma.smallgroup.findMany({\r\n                where: {\r\n                    universityId: Number(universityId)\r\n                },\r\n                include: {\r\n                    member: {\r\n                        where: {\r\n                            ...where,\r\n                            universityId: Number(universityId)\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            for (const smallGroup of smallGroups) {\r\n                // Get event engagement for this small group\r\n                const eventEngagement = await prisma.attendance.count({\r\n                    where: {\r\n                        status: 'present',\r\n                        member: {\r\n                            ...where,\r\n                            universityId: Number(universityId),\r\n                            smallGroupId: smallGroup.id\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Get designation engagement for this small group\r\n                const designationEngagement = await prisma.contribution.count({\r\n                    where: {\r\n                        status: 'completed',\r\n                        member: {\r\n                            ...where,\r\n                            universityId: Number(universityId),\r\n                            smallGroupId: smallGroup.id\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const totalEngagement = eventEngagement + designationEngagement;\r\n                const engagementRate = smallGroup.member.length > 0 ? Math.round((totalEngagement / smallGroup.member.length) * 100) : 0;\r\n\r\n                comparisonData.push({\r\n                    region: smallGroup.name, // Using small group name as the label\r\n                    totalEngagement,\r\n                    eventEngagement,\r\n                    designationEngagement,\r\n                    engagementRate\r\n                });\r\n            }\r\n        }\r\n        // Default: show regional comparison\r\n        else {\r\n            const regions = await prisma.region.findMany({\r\n                where: where.regionId ? { id: where.regionId } : {},\r\n                include: {\r\n                    member: {\r\n                        where: where\r\n                    }\r\n                }\r\n            });\r\n\r\n            for (const region of regions) {\r\n                // Get event engagement for this region\r\n                const eventEngagement = await prisma.attendance.count({\r\n                    where: {\r\n                        status: 'present',\r\n                        member: {\r\n                            ...where,\r\n                            regionId: region.id\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Get designation engagement for this region\r\n                const designationEngagement = await prisma.contribution.count({\r\n                    where: {\r\n                        status: 'completed',\r\n                        member: {\r\n                            ...where,\r\n                            regionId: region.id\r\n                        }\r\n                    }\r\n                });\r\n\r\n                const totalEngagement = eventEngagement + designationEngagement;\r\n                const engagementRate = region.member.length > 0 ? Math.round((totalEngagement / region.member.length) * 100) : 0;\r\n\r\n                comparisonData.push({\r\n                    region: region.name,\r\n                    totalEngagement,\r\n                    eventEngagement,\r\n                    designationEngagement,\r\n                    engagementRate\r\n                });\r\n            }\r\n        }\r\n\r\n        return comparisonData;\r\n    } catch (error) {\r\n        console.error('Error fetching regional engagement data:', error);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Helper function to get engagement type distribution\r\nasync function getEngagementTypeDistribution(where: Record<string, unknown>) {\r\n    try {\r\n        const eventAttendance = await prisma.attendance.count({\r\n            where: {\r\n                status: 'present',\r\n                member: where\r\n            }\r\n        });\r\n\r\n        const designationParticipation = await prisma.contribution.count({\r\n            where: {\r\n                status: 'completed',\r\n                member: where\r\n            }\r\n        });\r\n\r\n        const total = eventAttendance + designationParticipation;\r\n\r\n        return [\r\n            {\r\n                name: 'Events',\r\n                value: total > 0 ? Math.round((eventAttendance / total) * 100) : 0,\r\n                color: '#3B82F6',\r\n                count: eventAttendance\r\n            },\r\n            {\r\n                name: 'Designations',\r\n                value: total > 0 ? Math.round((designationParticipation / total) * 100) : 0,\r\n                color: '#10B981',\r\n                count: designationParticipation\r\n            }\r\n        ];\r\n    } catch (error) {\r\n        console.error('Error fetching engagement type distribution:', error);\r\n        return [\r\n            { name: 'Events', value: 0, color: '#3B82F6', count: 0 },\r\n            { name: 'Designations', value: 0, color: '#10B981', count: 0 }\r\n        ];\r\n    }\r\n}\r\n\r\n// Helper function to get event engagement levels\r\nasync function getEventEngagementLevels(where: Record<string, unknown>) {\r\n    try {\r\n        // Get all members with their engagement counts\r\n        const members = await prisma.member.findMany({\r\n            where,\r\n            include: {\r\n                attendance: {\r\n                    where: {\r\n                        status: 'present'\r\n                    }\r\n                },\r\n                contribution: {\r\n                    where: {\r\n                        status: 'completed'\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        // Calculate engagement levels based on actual participation\r\n        let highEngagement = 0;\r\n        let mediumEngagement = 0;\r\n        let lowEngagement = 0;\r\n\r\n        members.forEach(member => {\r\n            const totalEngagement = member.attendance.length + member.contribution.length;\r\n            \r\n            if (totalEngagement >= 5) {\r\n                highEngagement++;\r\n            } else if (totalEngagement >= 2) {\r\n                mediumEngagement++;\r\n            } else {\r\n                lowEngagement++;\r\n            }\r\n        });\r\n\r\n        const totalMembers = members.length;\r\n        \r\n        if (totalMembers === 0) {\r\n            return [\r\n                { name: 'High Engagement', value: 0, color: '#10B981', count: 0 },\r\n                { name: 'Medium Engagement', value: 0, color: '#F59E0B', count: 0 },\r\n                { name: 'Low Engagement', value: 0, color: '#EF4444', count: 0 }\r\n            ];\r\n        }\r\n\r\n        return [\r\n            {\r\n                name: 'High Engagement',\r\n                value: Math.round((highEngagement / totalMembers) * 100),\r\n                color: '#10B981',\r\n                count: highEngagement\r\n            },\r\n            {\r\n                name: 'Medium Engagement',\r\n                value: Math.round((mediumEngagement / totalMembers) * 100),\r\n                color: '#F59E0B',\r\n                count: mediumEngagement\r\n            },\r\n            {\r\n                name: 'Low Engagement',\r\n                value: Math.round((lowEngagement / totalMembers) * 100),\r\n                color: '#EF4444',\r\n                count: lowEngagement\r\n            }\r\n        ];\r\n    } catch (error) {\r\n        console.error('Error fetching event engagement levels:', error);\r\n        return [\r\n            { name: 'High Engagement', value: 0, color: '#10B981', count: 0 },\r\n            { name: 'Medium Engagement', value: 0, color: '#F59E0B', count: 0 },\r\n            { name: 'Low Engagement', value: 0, color: '#EF4444', count: 0 }\r\n        ];\r\n    }\r\n}\r\n\r\n// Helper function to calculate engagement rate\r\nfunction calculateEngagementRate(eventData: Record<string, unknown>, designationData: Record<string, unknown>): number {\r\n    const totalEngagement = eventData.totalAttendance + designationData.totalContributions;\r\n    const totalMembers = eventData.events.length + designationData.contributions.length;\r\n    \r\n    return totalMembers > 0 ? Math.round((totalEngagement / totalMembers) * 100) : 0;\r\n}\r\n\r\n// Helper function to calculate monthly growth\r\nfunction calculateMonthlyGrowth(trends: Record<string, unknown>[]): number {\r\n    if (trends.length < 2) return 0;\r\n    \r\n    const current = trends[trends.length - 1];\r\n    const previous = trends[trends.length - 2];\r\n    \r\n    if (previous.totalEngagement === 0) return 0;\r\n    \r\n    return Math.round(((current.totalEngagement - previous.totalEngagement) / previous.totalEngagement) * 100);\r\n}\r\n\r\n// Helper function to generate sample trends data\r\nfunction _generateSampleTrends() {\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    const currentMonth = new Date().getMonth();\r\n    \r\n    return months.slice(currentMonth - 11, currentMonth + 1).map((month, _index) => ({\r\n        month,\r\n        eventAttendance: Math.floor(Math.random() * 100) + 50,\r\n        designationParticipation: Math.floor(Math.random() * 50) + 20,\r\n        totalEngagement: Math.floor(Math.random() * 150) + 70,\r\n        engagementRate: Math.floor(Math.random() * 30) + 50,\r\n        activeMembers: Math.floor(Math.random() * 200) + 100\r\n    }));\r\n}\r\n\r\n// Helper function to check if there's any engagement data in the database\r\nasync function checkForAnyEngagementData(where: Record<string, unknown>) {\r\n    try {\r\n        // Check for any attendance records\r\n        const attendanceCount = await prisma.attendance.count({\r\n            where: {\r\n                member: where\r\n            }\r\n        });\r\n\r\n        // Check for any contributions\r\n        const contributionCount = await prisma.contribution.count({\r\n            where: {\r\n                member: where\r\n            }\r\n        });\r\n\r\n        // Check for any events\r\n        const eventCount = await prisma.permanentministryevent.count({\r\n            where: where\r\n        });\r\n\r\n        // Check for any trainings\r\n        const trainingCount = await prisma.trainings.count({\r\n            where: where\r\n        });\r\n\r\n        return attendanceCount > 0 || contributionCount > 0 || eventCount > 0 || trainingCount > 0;\r\n    } catch (error) {\r\n        console.error('Error checking for engagement data:', error);\r\n        return false;\r\n    }\r\n}\r\n\r\n// Helper function to generate sample regional data\r\nfunction _generateSampleRegionalData() {\r\n    const regions = ['Kigali', 'Northern', 'Southern', 'Eastern', 'Western'];\r\n    \r\n    return regions.map(region => ({\r\n        region,\r\n        totalEngagement: Math.floor(Math.random() * 300) + 100,\r\n        eventEngagement: Math.floor(Math.random() * 200) + 50,\r\n        designationEngagement: Math.floor(Math.random() * 100) + 25,\r\n        engagementRate: Math.floor(Math.random() * 40) + 40\r\n    }));\r\n}\r\n"],"names":[],"mappings":"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","ignoreList":[0]}