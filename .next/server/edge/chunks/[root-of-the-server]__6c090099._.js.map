{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,qKAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/ (unsupported edge import 'crypto')"],"sourcesContent":["__turbopack_context__.n(__import_unsupported(`crypto`));\n"],"names":[],"mappings":"AAAA,sBAAsB,CAAC,CAAC,qBAAqB,CAAC,MAAM,CAAC"}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\r\nimport Credentials from \"next-auth/providers/credentials\"\r\nimport { PrismaAdapter } from \"@auth/prisma-adapter\"\r\nimport { prisma } from \"@/lib/prisma\"\r\nimport bcrypt from \"bcryptjs\"\r\n\r\nexport const { handlers, auth, signIn, signOut } = NextAuth({\r\n  adapter: PrismaAdapter(prisma),\r\n  providers: [\r\n    Credentials({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" }\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null\r\n        }\r\n\r\n        try {\r\n          // Find user by email\r\n          const user = await prisma.user.findUnique({\r\n            where: { email: credentials.email },\r\n            include: {\r\n              userrole: {\r\n                include: {\r\n                  region: true,\r\n                  university: true,\r\n                  smallgroup: true,\r\n                  alumnismallgroup: true,\r\n                }\r\n              }\r\n            }\r\n          })\r\n\r\n          if (!user) {\r\n            return null\r\n          }\r\n\r\n          // Check if user has a password (some users might be OAuth only)\r\n          if (!user.password) {\r\n            return null\r\n          }\r\n\r\n          // Verify password\r\n          const isValidPassword = await bcrypt.compare(credentials.password, user.password)\r\n\r\n          if (!isValidPassword) {\r\n            return null\r\n          }\r\n\r\n          // Check if user is active\r\n          if (user.status === 'inactive' || user.status === 'suspended') {\r\n            return null\r\n          }\r\n\r\n          return {\r\n            id: user.id,\r\n            name: user.name,\r\n            email: user.email,\r\n            username: user.username,\r\n            image: user.image,\r\n            roles: user.userrole?.map(role => ({\r\n              scope: role.scope,\r\n              regionId: role.regionId,\r\n              universityId: role.universityId,\r\n              smallGroupId: role.smallGroupId,\r\n              alumniGroupId: role.alumniGroupId,\r\n              region: role.region,\r\n              university: role.university,\r\n              smallgroup: role.smallgroup,\r\n              alumnismallgroup: role.alumnismallgroup,\r\n            })) || []\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Auth error:\", error)\r\n          return null\r\n        }\r\n      }\r\n    })\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.roles = user.roles\r\n        token.username = user.username\r\n      }\r\n      return token\r\n    },\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.user.id = token.sub!\r\n        session.user.username = token.username as string\r\n        session.user.roles = token.roles as any[]\r\n      }\r\n      return session\r\n    }\r\n  },\r\n  pages: {\r\n    signIn: \"/\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET || \"fallback-secret-for-development\",\r\n})\r\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAEO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAA,wKAAQ,EAAC;IAC1D,SAAS,IAAA,6KAAa,EAAC,+HAAM;IAC7B,WAAW;QACT,IAAA,6KAAW,EAAC;YACV,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,IAAI;oBACF,qBAAqB;oBACrB,MAAM,OAAO,MAAM,+HAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BAAE,OAAO,YAAY,KAAK;wBAAC;wBAClC,SAAS;4BACP,UAAU;gCACR,SAAS;oCACP,QAAQ;oCACR,YAAY;oCACZ,YAAY;oCACZ,kBAAkB;gCACpB;4BACF;wBACF;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,OAAO;oBACT;oBAEA,gEAAgE;oBAChE,IAAI,CAAC,KAAK,QAAQ,EAAE;wBAClB,OAAO;oBACT;oBAEA,kBAAkB;oBAClB,MAAM,kBAAkB,MAAM,oJAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;oBAEhF,IAAI,CAAC,iBAAiB;wBACpB,OAAO;oBACT;oBAEA,0BAA0B;oBAC1B,IAAI,KAAK,MAAM,KAAK,cAAc,KAAK,MAAM,KAAK,aAAa;wBAC7D,OAAO;oBACT;oBAEA,OAAO;wBACL,IAAI,KAAK,EAAE;wBACX,MAAM,KAAK,IAAI;wBACf,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;wBACvB,OAAO,KAAK,KAAK;wBACjB,OAAO,KAAK,QAAQ,EAAE,IAAI,CAAA,OAAQ,CAAC;gCACjC,OAAO,KAAK,KAAK;gCACjB,UAAU,KAAK,QAAQ;gCACvB,cAAc,KAAK,YAAY;gCAC/B,cAAc,KAAK,YAAY;gCAC/B,eAAe,KAAK,aAAa;gCACjC,QAAQ,KAAK,MAAM;gCACnB,YAAY,KAAK,UAAU;gCAC3B,YAAY,KAAK,UAAU;gCAC3B,kBAAkB,KAAK,gBAAgB;4BACzC,CAAC,MAAM,EAAE;oBACX;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,eAAe;oBAC7B,OAAO;gBACT;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,KAAK,GAAG,KAAK,KAAK;gBACxB,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG;gBAC3B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;gBACtC,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,KAAK;YAClC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;IACV;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe,IAAI;AACzC"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { auth } from \"@/lib/auth\"\r\n\r\nexport default auth((req) => {\r\n  const { nextUrl } = req\r\n  const isLoggedIn = !!req.auth\r\n\r\n  // Allow access to root page (login page) without authentication\r\n  if (nextUrl.pathname === '/') {\r\n    return\r\n  }\r\n  \r\n  // Allow access to API auth routes\r\n  if (nextUrl.pathname.startsWith('/api/auth')) {\r\n    return\r\n  }\r\n  \r\n  // Explicitly protect dashboard and all sub-routes\r\n  if (nextUrl.pathname.startsWith('/dashboard')) {\r\n    if (!isLoggedIn) {\r\n      return Response.redirect(new URL('/', nextUrl))\r\n    }\r\n    return\r\n  }\r\n  \r\n  // Explicitly protect all links routes\r\n  if (nextUrl.pathname.startsWith('/links')) {\r\n    if (!isLoggedIn) {\r\n      return Response.redirect(new URL('/', nextUrl))\r\n    }\r\n    return\r\n  }\r\n  \r\n  // Require authentication for all other routes\r\n  if (!isLoggedIn) {\r\n    return Response.redirect(new URL('/', nextUrl))\r\n  }\r\n})\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - api (API routes)\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     */\r\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\r\n  ],\r\n}\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;AAAA;;uCAEe,IAAA,2HAAI,EAAC,CAAC;IACnB,MAAM,EAAE,OAAO,EAAE,GAAG;IACpB,MAAM,aAAa,CAAC,CAAC,IAAI,IAAI;IAE7B,gEAAgE;IAChE,IAAI,QAAQ,QAAQ,KAAK,KAAK;QAC5B;IACF;IAEA,kCAAkC;IAClC,IAAI,QAAQ,QAAQ,CAAC,UAAU,CAAC,cAAc;QAC5C;IACF;IAEA,kDAAkD;IAClD,IAAI,QAAQ,QAAQ,CAAC,UAAU,CAAC,eAAe;QAC7C,IAAI,CAAC,YAAY;YACf,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;QACxC;QACA;IACF;IAEA,sCAAsC;IACtC,IAAI,QAAQ,QAAQ,CAAC,UAAU,CAAC,WAAW;QACzC,IAAI,CAAC,YAAY;YACf,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;QACxC;QACA;IACF;IAEA,8CAA8C;IAC9C,IAAI,CAAC,YAAY;QACf,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;IACxC;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}