
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  refresh_token_expires_in: 'refresh_token_expires_in',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlumnismallgroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  regionId: 'regionId'
};

exports.Prisma.ApprovalrequestScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  requestedById: 'requestedById',
  reviewedById: 'reviewedById',
  regionId: 'regionId',
  universityId: 'universityId',
  smallGroupId: 'smallGroupId',
  alumniGroupId: 'alumniGroupId',
  trainingsId: 'trainingsId',
  details: 'details',
  createdAt: 'createdAt',
  reviewedAt: 'reviewedAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  trainingId: 'trainingId',
  permanentEventId: 'permanentEventId',
  status: 'status',
  recordedAt: 'recordedAt',
  notes: 'notes'
};

exports.Prisma.AuditlogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  userId: 'userId',
  details: 'details',
  createdAt: 'createdAt'
};

exports.Prisma.AuthenticatorScalarFieldEnum = {
  credentialID: 'credentialID',
  userId: 'userId',
  providerAccountId: 'providerAccountId',
  credentialPublicKey: 'credentialPublicKey',
  counter: 'counter',
  credentialDeviceType: 'credentialDeviceType',
  credentialBackedUp: 'credentialBackedUp',
  transports: 'transports'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  name: 'name',
  period: 'period',
  allocatedAmount: 'allocatedAmount',
  regionId: 'regionId',
  universityId: 'universityId',
  smallGroupId: 'smallGroupId',
  alumniGroupId: 'alumniGroupId',
  trainingsId: 'trainingsId'
};

exports.Prisma.CellsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  sector_id: 'sector_id'
};

exports.Prisma.ContributionScalarFieldEnum = {
  id: 'id',
  contributorId: 'contributorId',
  amount: 'amount',
  method: 'method',
  designationId: 'designationId',
  status: 'status',
  transactionId: 'transactionId',
  paymentTransactionId: 'paymentTransactionId',
  createdAt: 'createdAt',
  memberId: 'memberId'
};

exports.Prisma.ContributiondesignationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  targetAmount: 'targetAmount',
  currentAmount: 'currentAmount',
  isActive: 'isActive',
  regionId: 'regionId',
  universityId: 'universityId',
  smallGroupId: 'smallGroupId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContributionreceiptScalarFieldEnum = {
  id: 'id',
  contributionId: 'contributionId',
  receiptNumber: 'receiptNumber',
  pdfPath: 'pdfPath',
  emailSent: 'emailSent',
  emailSentAt: 'emailSentAt',
  smsSent: 'smsSent',
  smsSentAt: 'smsSentAt',
  createdAt: 'createdAt'
};

exports.Prisma.ContributorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  memberId: 'memberId'
};

exports.Prisma.DistrictsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  province_id: 'province_id'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  url: 'url',
  uploadedById: 'uploadedById',
  regionId: 'regionId',
  universityId: 'universityId',
  smallGroupId: 'smallGroupId',
  alumniGroupId: 'alumniGroupId',
  createdAt: 'createdAt'
};

exports.Prisma.MemberScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  secondname: 'secondname',
  gender: 'gender',
  birthdate: 'birthdate',
  placeOfBirthDistrict: 'placeOfBirthDistrict',
  placeOfBirthSector: 'placeOfBirthSector',
  placeOfBirthCell: 'placeOfBirthCell',
  placeOfBirthVillage: 'placeOfBirthVillage',
  localChurch: 'localChurch',
  email: 'email',
  phone: 'phone',
  type: 'type',
  status: 'status',
  regionId: 'regionId',
  universityId: 'universityId',
  smallGroupId: 'smallGroupId',
  alumniGroupId: 'alumniGroupId',
  graduationDate: 'graduationDate',
  faculty: 'faculty',
  professionalism: 'professionalism',
  maritalStatus: 'maritalStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  placeOfBirthProvince: 'placeOfBirthProvince'
};

exports.Prisma.MovementScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  fromGroupId: 'fromGroupId',
  toGroupId: 'toGroupId',
  fromLocation: 'fromLocation',
  toLocation: 'toLocation',
  reason: 'reason',
  movedAt: 'movedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  subject: 'subject',
  message: 'message',
  status: 'status',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentgatewayScalarFieldEnum = {
  id: 'id',
  name: 'name',
  provider: 'provider',
  isActive: 'isActive',
  configuration: 'configuration',
  supportedMethods: 'supportedMethods',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymenttransactionScalarFieldEnum = {
  id: 'id',
  externalId: 'externalId',
  gatewayId: 'gatewayId',
  amount: 'amount',
  currency: 'currency',
  phoneNumber: 'phoneNumber',
  email: 'email',
  payerName: 'payerName',
  status: 'status',
  gatewayResponse: 'gatewayResponse',
  failureReason: 'failureReason',
  webhookVerified: 'webhookVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermanentministryeventScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  regionId: 'regionId',
  universityId: 'universityId',
  smallGroupId: 'smallGroupId',
  alumniGroupId: 'alumniGroupId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProvincesScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SectorsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  district_id: 'district_id'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SmallgroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  universityId: 'universityId',
  regionId: 'regionId'
};

exports.Prisma.StaffprofileScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  position: 'position',
  startDate: 'startDate',
  endDate: 'endDate',
  mentorship: 'mentorship',
  notes: 'notes'
};

exports.Prisma.TrainingsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  startDateTime: 'startDateTime',
  endDateTime: 'endDateTime',
  location: 'location',
  regionId: 'regionId',
  universityId: 'universityId',
  smallGroupId: 'smallGroupId',
  alumniGroupId: 'alumniGroupId',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UniversityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  regionId: 'regionId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  password: 'password'
};

exports.Prisma.UserroleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  regionId: 'regionId',
  universityId: 'universityId',
  smallGroupId: 'smallGroupId',
  alumniGroupId: 'alumniGroupId',
  scope: 'scope',
  assignedAt: 'assignedAt'
};

exports.Prisma.VerificationtokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.VillagesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cell_id: 'cell_id'
};

exports.Prisma.VolunteerprofileScalarFieldEnum = {
  id: 'id',
  memberId: 'memberId',
  skills: 'skills',
  hours: 'hours',
  commitmentLevel: 'commitmentLevel',
  onboardingDate: 'onboardingDate',
  exitDate: 'exitDate',
  notes: 'notes'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.accountOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.alumnismallgroupOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.approvalrequestOrderByRelevanceFieldEnum = {
  requestedById: 'requestedById',
  reviewedById: 'reviewedById',
  details: 'details'
};

exports.Prisma.attendanceOrderByRelevanceFieldEnum = {
  notes: 'notes'
};

exports.Prisma.auditlogOrderByRelevanceFieldEnum = {
  action: 'action',
  userId: 'userId',
  details: 'details'
};

exports.Prisma.authenticatorOrderByRelevanceFieldEnum = {
  credentialID: 'credentialID',
  userId: 'userId',
  providerAccountId: 'providerAccountId',
  credentialPublicKey: 'credentialPublicKey',
  credentialDeviceType: 'credentialDeviceType',
  transports: 'transports'
};

exports.Prisma.budgetOrderByRelevanceFieldEnum = {
  name: 'name',
  period: 'period'
};

exports.Prisma.cellsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.contributionOrderByRelevanceFieldEnum = {
  transactionId: 'transactionId'
};

exports.Prisma.contributiondesignationOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.contributionreceiptOrderByRelevanceFieldEnum = {
  receiptNumber: 'receiptNumber',
  pdfPath: 'pdfPath'
};

exports.Prisma.contributorOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone'
};

exports.Prisma.districtsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.documentOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  url: 'url',
  uploadedById: 'uploadedById'
};

exports.Prisma.memberOrderByRelevanceFieldEnum = {
  firstname: 'firstname',
  secondname: 'secondname',
  gender: 'gender',
  placeOfBirthDistrict: 'placeOfBirthDistrict',
  placeOfBirthSector: 'placeOfBirthSector',
  placeOfBirthCell: 'placeOfBirthCell',
  placeOfBirthVillage: 'placeOfBirthVillage',
  localChurch: 'localChurch',
  email: 'email',
  phone: 'phone',
  faculty: 'faculty',
  professionalism: 'professionalism',
  maritalStatus: 'maritalStatus',
  placeOfBirthProvince: 'placeOfBirthProvince'
};

exports.Prisma.movementOrderByRelevanceFieldEnum = {
  fromLocation: 'fromLocation',
  toLocation: 'toLocation',
  reason: 'reason'
};

exports.Prisma.notificationOrderByRelevanceFieldEnum = {
  userId: 'userId',
  subject: 'subject',
  message: 'message'
};

exports.Prisma.paymentgatewayOrderByRelevanceFieldEnum = {
  name: 'name',
  provider: 'provider',
  configuration: 'configuration',
  supportedMethods: 'supportedMethods'
};

exports.Prisma.paymenttransactionOrderByRelevanceFieldEnum = {
  externalId: 'externalId',
  currency: 'currency',
  phoneNumber: 'phoneNumber',
  email: 'email',
  payerName: 'payerName',
  gatewayResponse: 'gatewayResponse',
  failureReason: 'failureReason'
};

exports.Prisma.permanentministryeventOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.provincesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.regionOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.sectorsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.sessionOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId'
};

exports.Prisma.smallgroupOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.staffprofileOrderByRelevanceFieldEnum = {
  position: 'position',
  mentorship: 'mentorship',
  notes: 'notes'
};

exports.Prisma.trainingsOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  location: 'location',
  createdById: 'createdById'
};

exports.Prisma.universityOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  image: 'image',
  password: 'password'
};

exports.Prisma.userroleOrderByRelevanceFieldEnum = {
  userId: 'userId'
};

exports.Prisma.verificationtokenOrderByRelevanceFieldEnum = {
  identifier: 'identifier',
  token: 'token'
};

exports.Prisma.villagesOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.volunteerprofileOrderByRelevanceFieldEnum = {
  skills: 'skills',
  commitmentLevel: 'commitmentLevel',
  notes: 'notes'
};
exports.approvalrequest_type = exports.$Enums.approvalrequest_type = {
  role_assignment: 'role_assignment',
  training: 'training',
  financial: 'financial',
  group_creation: 'group_creation',
  other: 'other'
};

exports.approvalrequest_status = exports.$Enums.approvalrequest_status = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.attendance_status = exports.$Enums.attendance_status = {
  present: 'present',
  absent: 'absent',
  excused: 'excused'
};

exports.contribution_method = exports.$Enums.contribution_method = {
  mobile_money: 'mobile_money',
  bank_transfer: 'bank_transfer',
  card: 'card',
  worldremit: 'worldremit'
};

exports.contribution_status = exports.$Enums.contribution_status = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded',
  processing: 'processing',
  cancelled: 'cancelled'
};

exports.member_type = exports.$Enums.member_type = {
  student: 'student',
  graduate: 'graduate',
  staff: 'staff',
  volunteer: 'volunteer',
  alumni: 'alumni'
};

exports.member_status = exports.$Enums.member_status = {
  active: 'active',
  pre_graduate: 'pre_graduate',
  graduate: 'graduate',
  alumni: 'alumni',
  inactive: 'inactive'
};

exports.notification_type = exports.$Enums.notification_type = {
  email: 'email',
  sms: 'sms',
  in_app: 'in_app'
};

exports.notification_status = exports.$Enums.notification_status = {
  sent: 'sent',
  pending: 'pending',
  failed: 'failed'
};

exports.paymenttransaction_status = exports.$Enums.paymenttransaction_status = {
  initiated: 'initiated',
  processing: 'processing',
  completed: 'completed',
  failed: 'failed',
  cancelled: 'cancelled',
  refunded: 'refunded'
};

exports.permanentministryevent_type = exports.$Enums.permanentministryevent_type = {
  bible_study: 'bible_study',
  discipleship: 'discipleship',
  evangelism: 'evangelism',
  cell_meeting: 'cell_meeting',
  alumni_meeting: 'alumni_meeting',
  other: 'other'
};

exports.userrole_scope = exports.$Enums.userrole_scope = {
  superadmin: 'superadmin',
  national: 'national',
  region: 'region',
  university: 'university',
  smallgroup: 'smallgroup',
  alumnismallgroup: 'alumnismallgroup'
};

exports.Prisma.ModelName = {
  account: 'account',
  alumnismallgroup: 'alumnismallgroup',
  approvalrequest: 'approvalrequest',
  attendance: 'attendance',
  auditlog: 'auditlog',
  authenticator: 'authenticator',
  budget: 'budget',
  cells: 'cells',
  contribution: 'contribution',
  contributiondesignation: 'contributiondesignation',
  contributionreceipt: 'contributionreceipt',
  contributor: 'contributor',
  districts: 'districts',
  document: 'document',
  member: 'member',
  movement: 'movement',
  notification: 'notification',
  paymentgateway: 'paymentgateway',
  paymenttransaction: 'paymenttransaction',
  permanentministryevent: 'permanentministryevent',
  provinces: 'provinces',
  region: 'region',
  sectors: 'sectors',
  session: 'session',
  smallgroup: 'smallgroup',
  staffprofile: 'staffprofile',
  trainings: 'trainings',
  university: 'university',
  user: 'user',
  userrole: 'userrole',
  verificationtoken: 'verificationtoken',
  villages: 'villages',
  volunteerprofile: 'volunteerprofile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
